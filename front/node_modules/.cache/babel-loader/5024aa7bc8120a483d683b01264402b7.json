{"ast":null,"code":"import * as React from 'react';\nimport { getThemeProps, useThemeWithoutDefault as useTheme } from '@mui/system';\nimport useEnhancedEffect from '../utils/useEnhancedEffect';\n/**\n * @deprecated Not used internally. Use `MediaQueryListEvent` from lib.dom.d.ts instead.\n */\n\nfunction useMediaQueryOld(query, defaultMatches, matchMedia, ssrMatchMedia, noSsr) {\n  const supportMatchMedia = typeof window !== 'undefined' && typeof window.matchMedia !== 'undefined';\n  const [match, setMatch] = React.useState(() => {\n    if (noSsr && supportMatchMedia) {\n      return matchMedia(query).matches;\n    }\n\n    if (ssrMatchMedia) {\n      return ssrMatchMedia(query).matches;\n    } // Once the component is mounted, we rely on the\n    // event listeners to return the correct matches value.\n\n\n    return defaultMatches;\n  });\n  useEnhancedEffect(() => {\n    let active = true;\n\n    if (!supportMatchMedia) {\n      return undefined;\n    }\n\n    const queryList = matchMedia(query);\n\n    const updateMatch = () => {\n      // Workaround Safari wrong implementation of matchMedia\n      // TODO can we remove it?\n      // https://github.com/mui/material-ui/pull/17315#issuecomment-528286677\n      if (active) {\n        setMatch(queryList.matches);\n      }\n    };\n\n    updateMatch(); // TODO: Use `addEventListener` once support for Safari < 14 is dropped\n\n    queryList.addListener(updateMatch);\n    return () => {\n      active = false;\n      queryList.removeListener(updateMatch);\n    };\n  }, [query, matchMedia, supportMatchMedia]);\n  return match;\n} // eslint-disable-next-line no-useless-concat -- Workaround for https://github.com/webpack/webpack/issues/14814\n\n\nconst maybeReactUseSyncExternalStore = React['useSyncExternalStore' + ''];\n\nfunction useMediaQueryNew(query, defaultMatches, matchMedia, ssrMatchMedia) {\n  const getDefaultSnapshot = React.useCallback(() => defaultMatches, [defaultMatches]);\n  const getServerSnapshot = React.useMemo(() => {\n    if (ssrMatchMedia !== null) {\n      const {\n        matches\n      } = ssrMatchMedia(query);\n      return () => matches;\n    }\n\n    return getDefaultSnapshot;\n  }, [getDefaultSnapshot, query, ssrMatchMedia]);\n  const [getSnapshot, subscribe] = React.useMemo(() => {\n    if (matchMedia === null) {\n      return [getDefaultSnapshot, () => () => {}];\n    }\n\n    const mediaQueryList = matchMedia(query);\n    return [() => mediaQueryList.matches, notify => {\n      // TODO: Use `addEventListener` once support for Safari < 14 is dropped\n      mediaQueryList.addListener(notify);\n      return () => {\n        mediaQueryList.removeListener(notify);\n      };\n    }];\n  }, [getDefaultSnapshot, matchMedia, query]);\n  const match = maybeReactUseSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n  return match;\n}\n\nexport default function useMediaQuery(queryInput) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const theme = useTheme(); // Wait for jsdom to support the match media feature.\n  // All the browsers MUI support have this built-in.\n  // This defensive check is here for simplicity.\n  // Most of the time, the match media logic isn't central to people tests.\n\n  const supportMatchMedia = typeof window !== 'undefined' && typeof window.matchMedia !== 'undefined';\n  const {\n    defaultMatches = false,\n    matchMedia = supportMatchMedia ? window.matchMedia : null,\n    ssrMatchMedia = null,\n    noSsr\n  } = getThemeProps({\n    name: 'MuiUseMediaQuery',\n    props: options,\n    theme\n  });\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof queryInput === 'function' && theme === null) {\n      console.error(['MUI: The `query` argument provided is invalid.', 'You are providing a function without a theme in the context.', 'One of the parent elements needs to use a ThemeProvider.'].join('\\n'));\n    }\n  }\n\n  let query = typeof queryInput === 'function' ? queryInput(theme) : queryInput;\n  query = query.replace(/^@media( ?)/m, ''); // TODO: Drop `useMediaQueryOld` and use  `use-sync-external-store` shim in `useMediaQueryNew` once the package is stable\n\n  const useMediaQueryImplementation = maybeReactUseSyncExternalStore !== undefined ? useMediaQueryNew : useMediaQueryOld;\n  const match = useMediaQueryImplementation(query, defaultMatches, matchMedia, ssrMatchMedia, noSsr);\n\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useDebugValue({\n      query,\n      match\n    });\n  }\n\n  return match;\n}","map":{"version":3,"sources":["/Users/juancarlossilva/Documents/apps/backend-test/front/node_modules/@mui/material/useMediaQuery/useMediaQuery.js"],"names":["React","getThemeProps","useThemeWithoutDefault","useTheme","useEnhancedEffect","useMediaQueryOld","query","defaultMatches","matchMedia","ssrMatchMedia","noSsr","supportMatchMedia","window","match","setMatch","useState","matches","active","undefined","queryList","updateMatch","addListener","removeListener","maybeReactUseSyncExternalStore","useMediaQueryNew","getDefaultSnapshot","useCallback","getServerSnapshot","useMemo","getSnapshot","subscribe","mediaQueryList","notify","useMediaQuery","queryInput","options","theme","name","props","process","env","NODE_ENV","console","error","join","replace","useMediaQueryImplementation","useDebugValue"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { getThemeProps, useThemeWithoutDefault as useTheme } from '@mui/system';\nimport useEnhancedEffect from '../utils/useEnhancedEffect';\n/**\n * @deprecated Not used internally. Use `MediaQueryListEvent` from lib.dom.d.ts instead.\n */\n\nfunction useMediaQueryOld(query, defaultMatches, matchMedia, ssrMatchMedia, noSsr) {\n  const supportMatchMedia = typeof window !== 'undefined' && typeof window.matchMedia !== 'undefined';\n  const [match, setMatch] = React.useState(() => {\n    if (noSsr && supportMatchMedia) {\n      return matchMedia(query).matches;\n    }\n\n    if (ssrMatchMedia) {\n      return ssrMatchMedia(query).matches;\n    } // Once the component is mounted, we rely on the\n    // event listeners to return the correct matches value.\n\n\n    return defaultMatches;\n  });\n  useEnhancedEffect(() => {\n    let active = true;\n\n    if (!supportMatchMedia) {\n      return undefined;\n    }\n\n    const queryList = matchMedia(query);\n\n    const updateMatch = () => {\n      // Workaround Safari wrong implementation of matchMedia\n      // TODO can we remove it?\n      // https://github.com/mui/material-ui/pull/17315#issuecomment-528286677\n      if (active) {\n        setMatch(queryList.matches);\n      }\n    };\n\n    updateMatch(); // TODO: Use `addEventListener` once support for Safari < 14 is dropped\n\n    queryList.addListener(updateMatch);\n    return () => {\n      active = false;\n      queryList.removeListener(updateMatch);\n    };\n  }, [query, matchMedia, supportMatchMedia]);\n  return match;\n} // eslint-disable-next-line no-useless-concat -- Workaround for https://github.com/webpack/webpack/issues/14814\n\n\nconst maybeReactUseSyncExternalStore = React['useSyncExternalStore' + ''];\n\nfunction useMediaQueryNew(query, defaultMatches, matchMedia, ssrMatchMedia) {\n  const getDefaultSnapshot = React.useCallback(() => defaultMatches, [defaultMatches]);\n  const getServerSnapshot = React.useMemo(() => {\n    if (ssrMatchMedia !== null) {\n      const {\n        matches\n      } = ssrMatchMedia(query);\n      return () => matches;\n    }\n\n    return getDefaultSnapshot;\n  }, [getDefaultSnapshot, query, ssrMatchMedia]);\n  const [getSnapshot, subscribe] = React.useMemo(() => {\n    if (matchMedia === null) {\n      return [getDefaultSnapshot, () => () => {}];\n    }\n\n    const mediaQueryList = matchMedia(query);\n    return [() => mediaQueryList.matches, notify => {\n      // TODO: Use `addEventListener` once support for Safari < 14 is dropped\n      mediaQueryList.addListener(notify);\n      return () => {\n        mediaQueryList.removeListener(notify);\n      };\n    }];\n  }, [getDefaultSnapshot, matchMedia, query]);\n  const match = maybeReactUseSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n  return match;\n}\n\nexport default function useMediaQuery(queryInput, options = {}) {\n  const theme = useTheme(); // Wait for jsdom to support the match media feature.\n  // All the browsers MUI support have this built-in.\n  // This defensive check is here for simplicity.\n  // Most of the time, the match media logic isn't central to people tests.\n\n  const supportMatchMedia = typeof window !== 'undefined' && typeof window.matchMedia !== 'undefined';\n  const {\n    defaultMatches = false,\n    matchMedia = supportMatchMedia ? window.matchMedia : null,\n    ssrMatchMedia = null,\n    noSsr\n  } = getThemeProps({\n    name: 'MuiUseMediaQuery',\n    props: options,\n    theme\n  });\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof queryInput === 'function' && theme === null) {\n      console.error(['MUI: The `query` argument provided is invalid.', 'You are providing a function without a theme in the context.', 'One of the parent elements needs to use a ThemeProvider.'].join('\\n'));\n    }\n  }\n\n  let query = typeof queryInput === 'function' ? queryInput(theme) : queryInput;\n  query = query.replace(/^@media( ?)/m, ''); // TODO: Drop `useMediaQueryOld` and use  `use-sync-external-store` shim in `useMediaQueryNew` once the package is stable\n\n  const useMediaQueryImplementation = maybeReactUseSyncExternalStore !== undefined ? useMediaQueryNew : useMediaQueryOld;\n  const match = useMediaQueryImplementation(query, defaultMatches, matchMedia, ssrMatchMedia, noSsr);\n\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useDebugValue({\n      query,\n      match\n    });\n  }\n\n  return match;\n}"]},"metadata":{},"sourceType":"module"}