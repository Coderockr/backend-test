{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"anchorOrigin\", \"classes\", \"badgeContent\", \"component\", \"children\", \"className\", \"components\", \"componentsProps\", \"invisible\", \"max\", \"showZero\", \"variant\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_capitalize as capitalize } from '@mui/utils';\nimport composeClasses from '../composeClasses';\nimport appendOwnerState from '../utils/appendOwnerState';\nimport useBadge from './useBadge';\nimport { getBadgeUtilityClass } from './badgeUnstyledClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    variant,\n    anchorOrigin,\n    invisible,\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root'],\n    badge: ['badge', variant, `anchorOrigin${capitalize(anchorOrigin.vertical)}${capitalize(anchorOrigin.horizontal)}`, invisible && 'invisible']\n  };\n  return composeClasses(slots, getBadgeUtilityClass, classes);\n};\n\nconst BadgeUnstyled = /*#__PURE__*/React.forwardRef(function BadgeUnstyled(props, ref) {\n  const {\n    anchorOrigin: anchorOriginProp = {\n      vertical: 'top',\n      horizontal: 'right'\n    },\n    classes: classesProp,\n    component,\n    children,\n    className,\n    components = {},\n    componentsProps = {},\n    max: maxProp = 99,\n    showZero = false,\n    variant: variantProp = 'standard'\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const {\n    anchorOrigin,\n    badgeContent,\n    max,\n    variant,\n    displayValue,\n    invisible\n  } = useBadge(_extends({}, props, {\n    anchorOrigin: anchorOriginProp,\n    max: maxProp,\n    variant: variantProp\n  }));\n\n  const ownerState = _extends({}, props, {\n    anchorOrigin,\n    badgeContent,\n    classes: classesProp,\n    invisible,\n    max,\n    variant,\n    showZero\n  });\n\n  const classes = useUtilityClasses(ownerState);\n  const Root = component || components.Root || 'span';\n  const rootProps = appendOwnerState(Root, _extends({}, other, componentsProps.root), ownerState);\n  const Badge = components.Badge || 'span';\n  const badgeProps = appendOwnerState(Badge, componentsProps.badge, ownerState);\n  return /*#__PURE__*/_jsxs(Root, _extends({}, rootProps, {\n    ref: ref\n  }, other, {\n    className: clsx(classes.root, rootProps.className, className),\n    children: [children, /*#__PURE__*/_jsx(Badge, _extends({}, badgeProps, {\n      className: clsx(classes.badge, badgeProps.className),\n      children: displayValue\n    }))]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? BadgeUnstyled.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The anchor of the badge.\n   * @default {\n   *   vertical: 'top',\n   *   horizontal: 'right',\n   * }\n   */\n  anchorOrigin: PropTypes.shape({\n    horizontal: PropTypes.oneOf(['left', 'right']).isRequired,\n    vertical: PropTypes.oneOf(['bottom', 'top']).isRequired\n  }),\n\n  /**\n   * The content rendered within the badge.\n   */\n  badgeContent: PropTypes.node,\n\n  /**\n   * The badge will be added relative to this node.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * The components used for each slot inside the Badge.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  components: PropTypes.shape({\n    Badge: PropTypes.elementType,\n    Root: PropTypes.elementType\n  }),\n\n  /**\n   * The props used for each slot inside the Badge.\n   * @default {}\n   */\n  componentsProps: PropTypes.shape({\n    badge: PropTypes.object,\n    root: PropTypes.object\n  }),\n\n  /**\n   * If `true`, the badge is invisible.\n   * @default false\n   */\n  invisible: PropTypes.bool,\n\n  /**\n   * Max count to show.\n   * @default 99\n   */\n  max: PropTypes.number,\n\n  /**\n   * Controls whether the badge is hidden when `badgeContent` is zero.\n   * @default false\n   */\n  showZero: PropTypes.bool,\n\n  /**\n   * The variant to use.\n   * @default 'standard'\n   */\n  variant: PropTypes.string\n} : void 0;\nexport default BadgeUnstyled;","map":{"version":3,"sources":["/Users/juancarlossilva/Documents/apps/backend-test/front/node_modules/@mui/base/BadgeUnstyled/BadgeUnstyled.js"],"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","PropTypes","clsx","unstable_capitalize","capitalize","composeClasses","appendOwnerState","useBadge","getBadgeUtilityClass","jsx","_jsx","jsxs","_jsxs","useUtilityClasses","ownerState","variant","anchorOrigin","invisible","classes","slots","root","badge","vertical","horizontal","BadgeUnstyled","forwardRef","props","ref","anchorOriginProp","classesProp","component","children","className","components","componentsProps","max","maxProp","showZero","variantProp","other","badgeContent","displayValue","Root","rootProps","Badge","badgeProps","process","env","NODE_ENV","propTypes","shape","oneOf","isRequired","node","object","string","elementType","bool","number"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"anchorOrigin\", \"classes\", \"badgeContent\", \"component\", \"children\", \"className\", \"components\", \"componentsProps\", \"invisible\", \"max\", \"showZero\", \"variant\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_capitalize as capitalize } from '@mui/utils';\nimport composeClasses from '../composeClasses';\nimport appendOwnerState from '../utils/appendOwnerState';\nimport useBadge from './useBadge';\nimport { getBadgeUtilityClass } from './badgeUnstyledClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    variant,\n    anchorOrigin,\n    invisible,\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root'],\n    badge: ['badge', variant, `anchorOrigin${capitalize(anchorOrigin.vertical)}${capitalize(anchorOrigin.horizontal)}`, invisible && 'invisible']\n  };\n  return composeClasses(slots, getBadgeUtilityClass, classes);\n};\n\nconst BadgeUnstyled = /*#__PURE__*/React.forwardRef(function BadgeUnstyled(props, ref) {\n  const {\n    anchorOrigin: anchorOriginProp = {\n      vertical: 'top',\n      horizontal: 'right'\n    },\n    classes: classesProp,\n    component,\n    children,\n    className,\n    components = {},\n    componentsProps = {},\n    max: maxProp = 99,\n    showZero = false,\n    variant: variantProp = 'standard'\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const {\n    anchorOrigin,\n    badgeContent,\n    max,\n    variant,\n    displayValue,\n    invisible\n  } = useBadge(_extends({}, props, {\n    anchorOrigin: anchorOriginProp,\n    max: maxProp,\n    variant: variantProp\n  }));\n\n  const ownerState = _extends({}, props, {\n    anchorOrigin,\n    badgeContent,\n    classes: classesProp,\n    invisible,\n    max,\n    variant,\n    showZero\n  });\n\n  const classes = useUtilityClasses(ownerState);\n  const Root = component || components.Root || 'span';\n  const rootProps = appendOwnerState(Root, _extends({}, other, componentsProps.root), ownerState);\n  const Badge = components.Badge || 'span';\n  const badgeProps = appendOwnerState(Badge, componentsProps.badge, ownerState);\n  return /*#__PURE__*/_jsxs(Root, _extends({}, rootProps, {\n    ref: ref\n  }, other, {\n    className: clsx(classes.root, rootProps.className, className),\n    children: [children, /*#__PURE__*/_jsx(Badge, _extends({}, badgeProps, {\n      className: clsx(classes.badge, badgeProps.className),\n      children: displayValue\n    }))]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? BadgeUnstyled.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The anchor of the badge.\n   * @default {\n   *   vertical: 'top',\n   *   horizontal: 'right',\n   * }\n   */\n  anchorOrigin: PropTypes.shape({\n    horizontal: PropTypes.oneOf(['left', 'right']).isRequired,\n    vertical: PropTypes.oneOf(['bottom', 'top']).isRequired\n  }),\n\n  /**\n   * The content rendered within the badge.\n   */\n  badgeContent: PropTypes.node,\n\n  /**\n   * The badge will be added relative to this node.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * The components used for each slot inside the Badge.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  components: PropTypes.shape({\n    Badge: PropTypes.elementType,\n    Root: PropTypes.elementType\n  }),\n\n  /**\n   * The props used for each slot inside the Badge.\n   * @default {}\n   */\n  componentsProps: PropTypes.shape({\n    badge: PropTypes.object,\n    root: PropTypes.object\n  }),\n\n  /**\n   * If `true`, the badge is invisible.\n   * @default false\n   */\n  invisible: PropTypes.bool,\n\n  /**\n   * Max count to show.\n   * @default 99\n   */\n  max: PropTypes.number,\n\n  /**\n   * Controls whether the badge is hidden when `badgeContent` is zero.\n   * @default false\n   */\n  showZero: PropTypes.bool,\n\n  /**\n   * The variant to use.\n   * @default 'standard'\n   */\n  variant: PropTypes.string\n} : void 0;\nexport default BadgeUnstyled;"]},"metadata":{},"sourceType":"module"}