{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@mui/utils\";\nconst _excluded = [\"colorSchemes\"],\n      _excluded2 = [\"colorSchemes\"],\n      _excluded3 = [\"components\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { GlobalStyles } from '@mui/styled-engine';\nimport { deepmerge, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nimport createSpacing from '../createTheme/createSpacing';\nimport createBreakpoints from '../createTheme/createBreakpoints';\nimport cssVarsParser from './cssVarsParser';\nimport ThemeProvider from '../ThemeProvider';\nimport getInitColorSchemeScript, { DEFAULT_ATTRIBUTE, DEFAULT_MODE_STORAGE_KEY } from './getInitColorSchemeScript';\nimport useCurrentColorScheme from './useCurrentColorScheme';\nimport createGetCssVar from './createGetCssVar';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const DISABLE_CSS_TRANSITION = '*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}';\nexport default function createCssVarsProvider(options) {\n  var _baseTheme$breakpoint;\n\n  const {\n    theme: baseTheme = {},\n    defaultMode: desisgnSystemMode = 'light',\n    defaultColorScheme: designSystemColorScheme,\n    disableTransitionOnChange = false,\n    enableColorScheme = true,\n    prefix: designSystemPrefix = '',\n    shouldSkipGeneratingVar,\n    resolveTheme\n  } = options;\n  const systemSpacing = createSpacing(baseTheme.spacing);\n  const systemBreakpoints = createBreakpoints((_baseTheme$breakpoint = baseTheme.breakpoints) != null ? _baseTheme$breakpoint : {});\n\n  if (!baseTheme.colorSchemes || typeof designSystemColorScheme === 'string' && !baseTheme.colorSchemes[designSystemColorScheme] || typeof designSystemColorScheme === 'object' && !baseTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.light] || typeof designSystemColorScheme === 'object' && !baseTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.dark]) {\n    console.error(`MUI: \\`${designSystemColorScheme}\\` does not exist in \\`theme.colorSchemes\\`.`);\n  }\n\n  const ColorSchemeContext = /*#__PURE__*/React.createContext(undefined);\n\n  const useColorScheme = () => {\n    const value = React.useContext(ColorSchemeContext);\n\n    if (!value) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: \\`useColorScheme\\` must be called under <CssVarsProvider />` : _formatMuiErrorMessage(19));\n    }\n\n    return value;\n  };\n\n  function CssVarsProvider(_ref) {\n    let {\n      children,\n      theme: themeProp = {},\n      prefix = designSystemPrefix,\n      modeStorageKey = DEFAULT_MODE_STORAGE_KEY,\n      attribute = DEFAULT_ATTRIBUTE,\n      defaultMode = desisgnSystemMode,\n      defaultColorScheme = designSystemColorScheme\n    } = _ref;\n    // make sure that baseTheme is always independent of each <CssVarsProvider /> call.\n    // JSON.parse(JSON.stringify(...)) is okay to be used as long as the baseTheme is a plain object.\n    const clonedBaseTheme = React.useMemo(() => JSON.parse(JSON.stringify(baseTheme)), []);\n\n    const {\n      colorSchemes: baseColorSchemes = {}\n    } = clonedBaseTheme,\n          restBaseTheme = _objectWithoutPropertiesLoose(clonedBaseTheme, _excluded);\n\n    const {\n      colorSchemes: colorSchemesProp = {}\n    } = themeProp,\n          restThemeProp = _objectWithoutPropertiesLoose(themeProp, _excluded2);\n\n    const hasMounted = React.useRef(false); // eslint-disable-next-line prefer-const\n\n    let _deepmerge = deepmerge(restBaseTheme, restThemeProp),\n        {\n      components = {}\n    } = _deepmerge,\n        mergedTheme = _objectWithoutPropertiesLoose(_deepmerge, _excluded3);\n\n    const colorSchemes = deepmerge(baseColorSchemes, colorSchemesProp);\n    const allColorSchemes = Object.keys(colorSchemes);\n    const defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\n    const defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark;\n    const {\n      mode,\n      setMode,\n      systemMode,\n      lightColorScheme,\n      darkColorScheme,\n      colorScheme,\n      setColorScheme\n    } = useCurrentColorScheme({\n      supportedColorSchemes: allColorSchemes,\n      defaultLightColorScheme,\n      defaultDarkColorScheme,\n      modeStorageKey,\n      defaultMode\n    });\n\n    const resolvedColorScheme = (() => {\n      if (!colorScheme) {\n        // This scope occurs on the server\n        if (defaultMode === 'dark') {\n          return defaultDarkColorScheme;\n        } // use light color scheme, if default mode is 'light' | 'auto'\n\n\n        return defaultLightColorScheme;\n      }\n\n      return colorScheme;\n    })();\n\n    const {\n      css: rootCss,\n      vars: rootVars\n    } = cssVarsParser(mergedTheme, {\n      prefix,\n      basePrefix: designSystemPrefix,\n      shouldSkipGeneratingVar\n    });\n    mergedTheme = _extends({}, mergedTheme, colorSchemes[resolvedColorScheme], {\n      components,\n      colorSchemes,\n      prefix,\n      vars: rootVars,\n      spacing: themeProp.spacing ? createSpacing(themeProp.spacing) : systemSpacing,\n      breakpoints: themeProp.breakpoints ? createBreakpoints(themeProp.breakpoints) : systemBreakpoints,\n      getCssVar: createGetCssVar(prefix)\n    });\n    const styleSheet = {};\n    Object.entries(colorSchemes).forEach(_ref2 => {\n      let [key, scheme] = _ref2;\n      const {\n        css,\n        vars\n      } = cssVarsParser(scheme, {\n        prefix,\n        basePrefix: designSystemPrefix,\n        shouldSkipGeneratingVar\n      });\n      mergedTheme.vars = deepmerge(mergedTheme.vars, vars);\n\n      const resolvedDefaultColorScheme = (() => {\n        if (typeof defaultColorScheme === 'string') {\n          return defaultColorScheme;\n        }\n\n        if (defaultMode === 'dark') {\n          return defaultColorScheme.dark;\n        }\n\n        return defaultColorScheme.light;\n      })();\n\n      if (key === resolvedDefaultColorScheme) {\n        styleSheet[':root'] = css;\n      } else {\n        styleSheet[`[${attribute}=\"${key}\"]`] = css;\n      }\n    });\n    React.useEffect(() => {\n      if (colorScheme) {\n        // attaches attribute to <html> because the css variables are attached to :root (html)\n        document.documentElement.setAttribute(attribute, colorScheme);\n      }\n    }, [colorScheme, attribute]);\n    useEnhancedEffect(() => {\n      if (!mode || !enableColorScheme) {\n        return undefined;\n      }\n\n      const priorColorScheme = document.documentElement.style.getPropertyValue('color-scheme'); // `color-scheme` tells browser to render built-in elements according to its value: `light` or `dark`\n\n      if (mode === 'system') {\n        document.documentElement.style.setProperty('color-scheme', systemMode);\n      } else {\n        document.documentElement.style.setProperty('color-scheme', mode);\n      }\n\n      return () => {\n        document.documentElement.style.setProperty('color-scheme', priorColorScheme);\n      };\n    }, [mode, systemMode]);\n    React.useEffect(() => {\n      let timer;\n\n      if (disableTransitionOnChange && hasMounted.current) {\n        // credit: https://github.com/pacocoursey/next-themes/blob/b5c2bad50de2d61ad7b52a9c5cdc801a78507d7a/index.tsx#L313\n        const css = document.createElement('style');\n        css.appendChild(document.createTextNode(DISABLE_CSS_TRANSITION));\n        document.head.appendChild(css); // Force browser repaint\n\n        (() => window.getComputedStyle(document.body))();\n\n        timer = setTimeout(() => {\n          document.head.removeChild(css);\n        }, 1);\n      }\n\n      return () => {\n        clearTimeout(timer);\n      };\n    }, [colorScheme]);\n    React.useEffect(() => {\n      hasMounted.current = true;\n      return () => {\n        hasMounted.current = false;\n      };\n    }, []);\n    return /*#__PURE__*/_jsxs(ColorSchemeContext.Provider, {\n      value: {\n        mode,\n        setMode,\n        lightColorScheme,\n        darkColorScheme,\n        colorScheme,\n        setColorScheme,\n        allColorSchemes\n      },\n      children: [/*#__PURE__*/_jsx(GlobalStyles, {\n        styles: {\n          ':root': rootCss\n        }\n      }), /*#__PURE__*/_jsx(GlobalStyles, {\n        styles: styleSheet\n      }), /*#__PURE__*/_jsx(ThemeProvider, {\n        theme: resolveTheme ? resolveTheme(mergedTheme) : mergedTheme,\n        children: children\n      })]\n    });\n  }\n\n  process.env.NODE_ENV !== \"production\" ? CssVarsProvider.propTypes = {\n    /**\n     * The body attribute name to attach colorScheme.\n     */\n    attribute: PropTypes.string,\n\n    /**\n     * The component tree.\n     */\n    children: PropTypes.node,\n\n    /**\n     * The initial color scheme used.\n     */\n    defaultColorScheme: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n\n    /**\n     * The initial mode used.\n     */\n    defaultMode: PropTypes.string,\n\n    /**\n     * The key in the local storage used to store current color scheme.\n     */\n    modeStorageKey: PropTypes.string,\n\n    /**\n     * CSS variable prefix.\n     */\n    prefix: PropTypes.string,\n\n    /**\n     * The calculated theme object that will be passed through context.\n     */\n    theme: PropTypes.object\n  } : void 0;\n  return {\n    CssVarsProvider,\n    useColorScheme,\n    getInitColorSchemeScript\n  };\n}","map":{"version":3,"sources":["/Users/juancarlossilva/Documents/apps/backend-test/front/node_modules/@mui/system/esm/cssVars/createCssVarsProvider.js"],"names":["_extends","_objectWithoutPropertiesLoose","formatMuiErrorMessage","_formatMuiErrorMessage","_excluded","_excluded2","_excluded3","React","PropTypes","GlobalStyles","deepmerge","unstable_useEnhancedEffect","useEnhancedEffect","createSpacing","createBreakpoints","cssVarsParser","ThemeProvider","getInitColorSchemeScript","DEFAULT_ATTRIBUTE","DEFAULT_MODE_STORAGE_KEY","useCurrentColorScheme","createGetCssVar","jsx","_jsx","jsxs","_jsxs","DISABLE_CSS_TRANSITION","createCssVarsProvider","options","_baseTheme$breakpoint","theme","baseTheme","defaultMode","desisgnSystemMode","defaultColorScheme","designSystemColorScheme","disableTransitionOnChange","enableColorScheme","prefix","designSystemPrefix","shouldSkipGeneratingVar","resolveTheme","systemSpacing","spacing","systemBreakpoints","breakpoints","colorSchemes","light","dark","console","error","ColorSchemeContext","createContext","undefined","useColorScheme","value","useContext","Error","process","env","NODE_ENV","CssVarsProvider","children","themeProp","modeStorageKey","attribute","clonedBaseTheme","useMemo","JSON","parse","stringify","baseColorSchemes","restBaseTheme","colorSchemesProp","restThemeProp","hasMounted","useRef","_deepmerge","components","mergedTheme","allColorSchemes","Object","keys","defaultLightColorScheme","defaultDarkColorScheme","mode","setMode","systemMode","lightColorScheme","darkColorScheme","colorScheme","setColorScheme","supportedColorSchemes","resolvedColorScheme","css","rootCss","vars","rootVars","basePrefix","getCssVar","styleSheet","entries","forEach","key","scheme","resolvedDefaultColorScheme","useEffect","document","documentElement","setAttribute","priorColorScheme","style","getPropertyValue","setProperty","timer","current","createElement","appendChild","createTextNode","head","window","getComputedStyle","body","setTimeout","removeChild","clearTimeout","Provider","styles","propTypes","string","node","oneOfType","object"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAOC,6BAAP,MAA0C,yDAA1C;AACA,SAASC,qBAAqB,IAAIC,sBAAlC,QAAgE,YAAhE;AACA,MAAMC,SAAS,GAAG,CAAC,cAAD,CAAlB;AAAA,MACMC,UAAU,GAAG,CAAC,cAAD,CADnB;AAAA,MAEMC,UAAU,GAAG,CAAC,YAAD,CAFnB;AAGA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,YAAT,QAA6B,oBAA7B;AACA,SAASC,SAAT,EAAoBC,0BAA0B,IAAIC,iBAAlD,QAA2E,YAA3E;AACA,OAAOC,aAAP,MAA0B,8BAA1B;AACA,OAAOC,iBAAP,MAA8B,kCAA9B;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,aAAP,MAA0B,kBAA1B;AACA,OAAOC,wBAAP,IAAmCC,iBAAnC,EAAsDC,wBAAtD,QAAsF,4BAAtF;AACA,OAAOC,qBAAP,MAAkC,yBAAlC;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,SAASC,GAAG,IAAIC,IAAhB,QAA4B,mBAA5B;AACA,SAASC,IAAI,IAAIC,KAAjB,QAA8B,mBAA9B;AACA,OAAO,MAAMC,sBAAsB,GAAG,0JAA/B;AACP,eAAe,SAASC,qBAAT,CAA+BC,OAA/B,EAAwC;AACrD,MAAIC,qBAAJ;;AAEA,QAAM;AACJC,IAAAA,KAAK,EAAEC,SAAS,GAAG,EADf;AAEJC,IAAAA,WAAW,EAAEC,iBAAiB,GAAG,OAF7B;AAGJC,IAAAA,kBAAkB,EAAEC,uBAHhB;AAIJC,IAAAA,yBAAyB,GAAG,KAJxB;AAKJC,IAAAA,iBAAiB,GAAG,IALhB;AAMJC,IAAAA,MAAM,EAAEC,kBAAkB,GAAG,EANzB;AAOJC,IAAAA,uBAPI;AAQJC,IAAAA;AARI,MASFb,OATJ;AAUA,QAAMc,aAAa,GAAG7B,aAAa,CAACkB,SAAS,CAACY,OAAX,CAAnC;AACA,QAAMC,iBAAiB,GAAG9B,iBAAiB,CAAC,CAACe,qBAAqB,GAAGE,SAAS,CAACc,WAAnC,KAAmD,IAAnD,GAA0DhB,qBAA1D,GAAkF,EAAnF,CAA3C;;AAEA,MAAI,CAACE,SAAS,CAACe,YAAX,IAA2B,OAAOX,uBAAP,KAAmC,QAAnC,IAA+C,CAACJ,SAAS,CAACe,YAAV,CAAuBX,uBAAvB,CAA3E,IAA8H,OAAOA,uBAAP,KAAmC,QAAnC,IAA+C,CAACJ,SAAS,CAACe,YAAV,CAAuBX,uBAAuB,IAAI,IAA3B,GAAkC,KAAK,CAAvC,GAA2CA,uBAAuB,CAACY,KAA1F,CAA9K,IAAkR,OAAOZ,uBAAP,KAAmC,QAAnC,IAA+C,CAACJ,SAAS,CAACe,YAAV,CAAuBX,uBAAuB,IAAI,IAA3B,GAAkC,KAAK,CAAvC,GAA2CA,uBAAuB,CAACa,IAA1F,CAAtU,EAAua;AACraC,IAAAA,OAAO,CAACC,KAAR,CAAe,UAASf,uBAAwB,8CAAhD;AACD;;AAED,QAAMgB,kBAAkB,GAAG,aAAa5C,KAAK,CAAC6C,aAAN,CAAoBC,SAApB,CAAxC;;AAEA,QAAMC,cAAc,GAAG,MAAM;AAC3B,UAAMC,KAAK,GAAGhD,KAAK,CAACiD,UAAN,CAAiBL,kBAAjB,CAAd;;AAEA,QAAI,CAACI,KAAL,EAAY;AACV,YAAM,IAAIE,KAAJ,CAAUC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAyC,kEAAzC,GAA6GzD,sBAAsB,CAAC,EAAD,CAA7I,CAAN;AACD;;AAED,WAAOoD,KAAP;AACD,GARD;;AAUA,WAASM,eAAT,OAQG;AAAA,QARsB;AACvBC,MAAAA,QADuB;AAEvBhC,MAAAA,KAAK,EAAEiC,SAAS,GAAG,EAFI;AAGvBzB,MAAAA,MAAM,GAAGC,kBAHc;AAIvByB,MAAAA,cAAc,GAAG7C,wBAJM;AAKvB8C,MAAAA,SAAS,GAAG/C,iBALW;AAMvBc,MAAAA,WAAW,GAAGC,iBANS;AAOvBC,MAAAA,kBAAkB,GAAGC;AAPE,KAQtB;AACD;AACA;AACA,UAAM+B,eAAe,GAAG3D,KAAK,CAAC4D,OAAN,CAAc,MAAMC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAevC,SAAf,CAAX,CAApB,EAA2D,EAA3D,CAAxB;;AAEA,UAAM;AACJe,MAAAA,YAAY,EAAEyB,gBAAgB,GAAG;AAD7B,QAEFL,eAFJ;AAAA,UAGMM,aAAa,GAAGvE,6BAA6B,CAACiE,eAAD,EAAkB9D,SAAlB,CAHnD;;AAKA,UAAM;AACJ0C,MAAAA,YAAY,EAAE2B,gBAAgB,GAAG;AAD7B,QAEFV,SAFJ;AAAA,UAGMW,aAAa,GAAGzE,6BAA6B,CAAC8D,SAAD,EAAY1D,UAAZ,CAHnD;;AAKA,UAAMsE,UAAU,GAAGpE,KAAK,CAACqE,MAAN,CAAa,KAAb,CAAnB,CAfC,CAeuC;;AAExC,QAAIC,UAAU,GAAGnE,SAAS,CAAC8D,aAAD,EAAgBE,aAAhB,CAA1B;AAAA,QACI;AACFI,MAAAA,UAAU,GAAG;AADX,QAEAD,UAHJ;AAAA,QAIIE,WAAW,GAAG9E,6BAA6B,CAAC4E,UAAD,EAAavE,UAAb,CAJ/C;;AAMA,UAAMwC,YAAY,GAAGpC,SAAS,CAAC6D,gBAAD,EAAmBE,gBAAnB,CAA9B;AACA,UAAMO,eAAe,GAAGC,MAAM,CAACC,IAAP,CAAYpC,YAAZ,CAAxB;AACA,UAAMqC,uBAAuB,GAAG,OAAOjD,kBAAP,KAA8B,QAA9B,GAAyCA,kBAAzC,GAA8DA,kBAAkB,CAACa,KAAjH;AACA,UAAMqC,sBAAsB,GAAG,OAAOlD,kBAAP,KAA8B,QAA9B,GAAyCA,kBAAzC,GAA8DA,kBAAkB,CAACc,IAAhH;AACA,UAAM;AACJqC,MAAAA,IADI;AAEJC,MAAAA,OAFI;AAGJC,MAAAA,UAHI;AAIJC,MAAAA,gBAJI;AAKJC,MAAAA,eALI;AAMJC,MAAAA,WANI;AAOJC,MAAAA;AAPI,QAQFvE,qBAAqB,CAAC;AACxBwE,MAAAA,qBAAqB,EAAEZ,eADC;AAExBG,MAAAA,uBAFwB;AAGxBC,MAAAA,sBAHwB;AAIxBpB,MAAAA,cAJwB;AAKxBhC,MAAAA;AALwB,KAAD,CARzB;;AAgBA,UAAM6D,mBAAmB,GAAG,CAAC,MAAM;AACjC,UAAI,CAACH,WAAL,EAAkB;AAChB;AACA,YAAI1D,WAAW,KAAK,MAApB,EAA4B;AAC1B,iBAAOoD,sBAAP;AACD,SAJe,CAId;;;AAGF,eAAOD,uBAAP;AACD;;AAED,aAAOO,WAAP;AACD,KAZ2B,GAA5B;;AAcA,UAAM;AACJI,MAAAA,GAAG,EAAEC,OADD;AAEJC,MAAAA,IAAI,EAAEC;AAFF,QAGFlF,aAAa,CAACgE,WAAD,EAAc;AAC7BzC,MAAAA,MAD6B;AAE7B4D,MAAAA,UAAU,EAAE3D,kBAFiB;AAG7BC,MAAAA;AAH6B,KAAd,CAHjB;AAQAuC,IAAAA,WAAW,GAAG/E,QAAQ,CAAC,EAAD,EAAK+E,WAAL,EAAkBjC,YAAY,CAAC+C,mBAAD,CAA9B,EAAqD;AACzEf,MAAAA,UADyE;AAEzEhC,MAAAA,YAFyE;AAGzER,MAAAA,MAHyE;AAIzE0D,MAAAA,IAAI,EAAEC,QAJmE;AAKzEtD,MAAAA,OAAO,EAAEoB,SAAS,CAACpB,OAAV,GAAoB9B,aAAa,CAACkD,SAAS,CAACpB,OAAX,CAAjC,GAAuDD,aALS;AAMzEG,MAAAA,WAAW,EAAEkB,SAAS,CAAClB,WAAV,GAAwB/B,iBAAiB,CAACiD,SAAS,CAAClB,WAAX,CAAzC,GAAmED,iBANP;AAOzEuD,MAAAA,SAAS,EAAE9E,eAAe,CAACiB,MAAD;AAP+C,KAArD,CAAtB;AASA,UAAM8D,UAAU,GAAG,EAAnB;AACAnB,IAAAA,MAAM,CAACoB,OAAP,CAAevD,YAAf,EAA6BwD,OAA7B,CAAqC,SAAmB;AAAA,UAAlB,CAACC,GAAD,EAAMC,MAAN,CAAkB;AACtD,YAAM;AACJV,QAAAA,GADI;AAEJE,QAAAA;AAFI,UAGFjF,aAAa,CAACyF,MAAD,EAAS;AACxBlE,QAAAA,MADwB;AAExB4D,QAAAA,UAAU,EAAE3D,kBAFY;AAGxBC,QAAAA;AAHwB,OAAT,CAHjB;AAQAuC,MAAAA,WAAW,CAACiB,IAAZ,GAAmBtF,SAAS,CAACqE,WAAW,CAACiB,IAAb,EAAmBA,IAAnB,CAA5B;;AAEA,YAAMS,0BAA0B,GAAG,CAAC,MAAM;AACxC,YAAI,OAAOvE,kBAAP,KAA8B,QAAlC,EAA4C;AAC1C,iBAAOA,kBAAP;AACD;;AAED,YAAIF,WAAW,KAAK,MAApB,EAA4B;AAC1B,iBAAOE,kBAAkB,CAACc,IAA1B;AACD;;AAED,eAAOd,kBAAkB,CAACa,KAA1B;AACD,OAVkC,GAAnC;;AAYA,UAAIwD,GAAG,KAAKE,0BAAZ,EAAwC;AACtCL,QAAAA,UAAU,CAAC,OAAD,CAAV,GAAsBN,GAAtB;AACD,OAFD,MAEO;AACLM,QAAAA,UAAU,CAAE,IAAGnC,SAAU,KAAIsC,GAAI,IAAvB,CAAV,GAAwCT,GAAxC;AACD;AACF,KA5BD;AA6BAvF,IAAAA,KAAK,CAACmG,SAAN,CAAgB,MAAM;AACpB,UAAIhB,WAAJ,EAAiB;AACf;AACAiB,QAAAA,QAAQ,CAACC,eAAT,CAAyBC,YAAzB,CAAsC5C,SAAtC,EAAiDyB,WAAjD;AACD;AACF,KALD,EAKG,CAACA,WAAD,EAAczB,SAAd,CALH;AAMArD,IAAAA,iBAAiB,CAAC,MAAM;AACtB,UAAI,CAACyE,IAAD,IAAS,CAAChD,iBAAd,EAAiC;AAC/B,eAAOgB,SAAP;AACD;;AAED,YAAMyD,gBAAgB,GAAGH,QAAQ,CAACC,eAAT,CAAyBG,KAAzB,CAA+BC,gBAA/B,CAAgD,cAAhD,CAAzB,CALsB,CAKoE;;AAE1F,UAAI3B,IAAI,KAAK,QAAb,EAAuB;AACrBsB,QAAAA,QAAQ,CAACC,eAAT,CAAyBG,KAAzB,CAA+BE,WAA/B,CAA2C,cAA3C,EAA2D1B,UAA3D;AACD,OAFD,MAEO;AACLoB,QAAAA,QAAQ,CAACC,eAAT,CAAyBG,KAAzB,CAA+BE,WAA/B,CAA2C,cAA3C,EAA2D5B,IAA3D;AACD;;AAED,aAAO,MAAM;AACXsB,QAAAA,QAAQ,CAACC,eAAT,CAAyBG,KAAzB,CAA+BE,WAA/B,CAA2C,cAA3C,EAA2DH,gBAA3D;AACD,OAFD;AAGD,KAhBgB,EAgBd,CAACzB,IAAD,EAAOE,UAAP,CAhBc,CAAjB;AAiBAhF,IAAAA,KAAK,CAACmG,SAAN,CAAgB,MAAM;AACpB,UAAIQ,KAAJ;;AAEA,UAAI9E,yBAAyB,IAAIuC,UAAU,CAACwC,OAA5C,EAAqD;AACnD;AACA,cAAMrB,GAAG,GAAGa,QAAQ,CAACS,aAAT,CAAuB,OAAvB,CAAZ;AACAtB,QAAAA,GAAG,CAACuB,WAAJ,CAAgBV,QAAQ,CAACW,cAAT,CAAwB5F,sBAAxB,CAAhB;AACAiF,QAAAA,QAAQ,CAACY,IAAT,CAAcF,WAAd,CAA0BvB,GAA1B,EAJmD,CAInB;;AAEhC,SAAC,MAAM0B,MAAM,CAACC,gBAAP,CAAwBd,QAAQ,CAACe,IAAjC,CAAP;;AAEAR,QAAAA,KAAK,GAAGS,UAAU,CAAC,MAAM;AACvBhB,UAAAA,QAAQ,CAACY,IAAT,CAAcK,WAAd,CAA0B9B,GAA1B;AACD,SAFiB,EAEf,CAFe,CAAlB;AAGD;;AAED,aAAO,MAAM;AACX+B,QAAAA,YAAY,CAACX,KAAD,CAAZ;AACD,OAFD;AAGD,KAnBD,EAmBG,CAACxB,WAAD,CAnBH;AAoBAnF,IAAAA,KAAK,CAACmG,SAAN,CAAgB,MAAM;AACpB/B,MAAAA,UAAU,CAACwC,OAAX,GAAqB,IAArB;AACA,aAAO,MAAM;AACXxC,QAAAA,UAAU,CAACwC,OAAX,GAAqB,KAArB;AACD,OAFD;AAGD,KALD,EAKG,EALH;AAMA,WAAO,aAAa1F,KAAK,CAAC0B,kBAAkB,CAAC2E,QAApB,EAA8B;AACrDvE,MAAAA,KAAK,EAAE;AACL8B,QAAAA,IADK;AAELC,QAAAA,OAFK;AAGLE,QAAAA,gBAHK;AAILC,QAAAA,eAJK;AAKLC,QAAAA,WALK;AAMLC,QAAAA,cANK;AAOLX,QAAAA;AAPK,OAD8C;AAUrDlB,MAAAA,QAAQ,EAAE,CAAC,aAAavC,IAAI,CAACd,YAAD,EAAe;AACzCsH,QAAAA,MAAM,EAAE;AACN,mBAAShC;AADH;AADiC,OAAf,CAAlB,EAIN,aAAaxE,IAAI,CAACd,YAAD,EAAe;AAClCsH,QAAAA,MAAM,EAAE3B;AAD0B,OAAf,CAJX,EAMN,aAAa7E,IAAI,CAACP,aAAD,EAAgB;AACnCc,QAAAA,KAAK,EAAEW,YAAY,GAAGA,YAAY,CAACsC,WAAD,CAAf,GAA+BA,WADf;AAEnCjB,QAAAA,QAAQ,EAAEA;AAFyB,OAAhB,CANX;AAV2C,KAA9B,CAAzB;AAqBD;;AAEDJ,EAAAA,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCC,eAAe,CAACmE,SAAhB,GAA4B;AAClE;AACJ;AACA;AACI/D,IAAAA,SAAS,EAAEzD,SAAS,CAACyH,MAJ6C;;AAMlE;AACJ;AACA;AACInE,IAAAA,QAAQ,EAAEtD,SAAS,CAAC0H,IAT8C;;AAWlE;AACJ;AACA;AACIhG,IAAAA,kBAAkB,EAAE1B,SAAS,CAAC2H,SAAV,CAAoB,CAAC3H,SAAS,CAACyH,MAAX,EAAmBzH,SAAS,CAAC4H,MAA7B,CAApB,CAd8C;;AAgBlE;AACJ;AACA;AACIpG,IAAAA,WAAW,EAAExB,SAAS,CAACyH,MAnB2C;;AAqBlE;AACJ;AACA;AACIjE,IAAAA,cAAc,EAAExD,SAAS,CAACyH,MAxBwC;;AA0BlE;AACJ;AACA;AACI3F,IAAAA,MAAM,EAAE9B,SAAS,CAACyH,MA7BgD;;AA+BlE;AACJ;AACA;AACInG,IAAAA,KAAK,EAAEtB,SAAS,CAAC4H;AAlCiD,GAApE,GAmCI,KAAK,CAnCT;AAoCA,SAAO;AACLvE,IAAAA,eADK;AAELP,IAAAA,cAFK;AAGLrC,IAAAA;AAHK,GAAP;AAKD","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@mui/utils\";\nconst _excluded = [\"colorSchemes\"],\n      _excluded2 = [\"colorSchemes\"],\n      _excluded3 = [\"components\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { GlobalStyles } from '@mui/styled-engine';\nimport { deepmerge, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nimport createSpacing from '../createTheme/createSpacing';\nimport createBreakpoints from '../createTheme/createBreakpoints';\nimport cssVarsParser from './cssVarsParser';\nimport ThemeProvider from '../ThemeProvider';\nimport getInitColorSchemeScript, { DEFAULT_ATTRIBUTE, DEFAULT_MODE_STORAGE_KEY } from './getInitColorSchemeScript';\nimport useCurrentColorScheme from './useCurrentColorScheme';\nimport createGetCssVar from './createGetCssVar';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const DISABLE_CSS_TRANSITION = '*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}';\nexport default function createCssVarsProvider(options) {\n  var _baseTheme$breakpoint;\n\n  const {\n    theme: baseTheme = {},\n    defaultMode: desisgnSystemMode = 'light',\n    defaultColorScheme: designSystemColorScheme,\n    disableTransitionOnChange = false,\n    enableColorScheme = true,\n    prefix: designSystemPrefix = '',\n    shouldSkipGeneratingVar,\n    resolveTheme\n  } = options;\n  const systemSpacing = createSpacing(baseTheme.spacing);\n  const systemBreakpoints = createBreakpoints((_baseTheme$breakpoint = baseTheme.breakpoints) != null ? _baseTheme$breakpoint : {});\n\n  if (!baseTheme.colorSchemes || typeof designSystemColorScheme === 'string' && !baseTheme.colorSchemes[designSystemColorScheme] || typeof designSystemColorScheme === 'object' && !baseTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.light] || typeof designSystemColorScheme === 'object' && !baseTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.dark]) {\n    console.error(`MUI: \\`${designSystemColorScheme}\\` does not exist in \\`theme.colorSchemes\\`.`);\n  }\n\n  const ColorSchemeContext = /*#__PURE__*/React.createContext(undefined);\n\n  const useColorScheme = () => {\n    const value = React.useContext(ColorSchemeContext);\n\n    if (!value) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: \\`useColorScheme\\` must be called under <CssVarsProvider />` : _formatMuiErrorMessage(19));\n    }\n\n    return value;\n  };\n\n  function CssVarsProvider({\n    children,\n    theme: themeProp = {},\n    prefix = designSystemPrefix,\n    modeStorageKey = DEFAULT_MODE_STORAGE_KEY,\n    attribute = DEFAULT_ATTRIBUTE,\n    defaultMode = desisgnSystemMode,\n    defaultColorScheme = designSystemColorScheme\n  }) {\n    // make sure that baseTheme is always independent of each <CssVarsProvider /> call.\n    // JSON.parse(JSON.stringify(...)) is okay to be used as long as the baseTheme is a plain object.\n    const clonedBaseTheme = React.useMemo(() => JSON.parse(JSON.stringify(baseTheme)), []);\n\n    const {\n      colorSchemes: baseColorSchemes = {}\n    } = clonedBaseTheme,\n          restBaseTheme = _objectWithoutPropertiesLoose(clonedBaseTheme, _excluded);\n\n    const {\n      colorSchemes: colorSchemesProp = {}\n    } = themeProp,\n          restThemeProp = _objectWithoutPropertiesLoose(themeProp, _excluded2);\n\n    const hasMounted = React.useRef(false); // eslint-disable-next-line prefer-const\n\n    let _deepmerge = deepmerge(restBaseTheme, restThemeProp),\n        {\n      components = {}\n    } = _deepmerge,\n        mergedTheme = _objectWithoutPropertiesLoose(_deepmerge, _excluded3);\n\n    const colorSchemes = deepmerge(baseColorSchemes, colorSchemesProp);\n    const allColorSchemes = Object.keys(colorSchemes);\n    const defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\n    const defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark;\n    const {\n      mode,\n      setMode,\n      systemMode,\n      lightColorScheme,\n      darkColorScheme,\n      colorScheme,\n      setColorScheme\n    } = useCurrentColorScheme({\n      supportedColorSchemes: allColorSchemes,\n      defaultLightColorScheme,\n      defaultDarkColorScheme,\n      modeStorageKey,\n      defaultMode\n    });\n\n    const resolvedColorScheme = (() => {\n      if (!colorScheme) {\n        // This scope occurs on the server\n        if (defaultMode === 'dark') {\n          return defaultDarkColorScheme;\n        } // use light color scheme, if default mode is 'light' | 'auto'\n\n\n        return defaultLightColorScheme;\n      }\n\n      return colorScheme;\n    })();\n\n    const {\n      css: rootCss,\n      vars: rootVars\n    } = cssVarsParser(mergedTheme, {\n      prefix,\n      basePrefix: designSystemPrefix,\n      shouldSkipGeneratingVar\n    });\n    mergedTheme = _extends({}, mergedTheme, colorSchemes[resolvedColorScheme], {\n      components,\n      colorSchemes,\n      prefix,\n      vars: rootVars,\n      spacing: themeProp.spacing ? createSpacing(themeProp.spacing) : systemSpacing,\n      breakpoints: themeProp.breakpoints ? createBreakpoints(themeProp.breakpoints) : systemBreakpoints,\n      getCssVar: createGetCssVar(prefix)\n    });\n    const styleSheet = {};\n    Object.entries(colorSchemes).forEach(([key, scheme]) => {\n      const {\n        css,\n        vars\n      } = cssVarsParser(scheme, {\n        prefix,\n        basePrefix: designSystemPrefix,\n        shouldSkipGeneratingVar\n      });\n      mergedTheme.vars = deepmerge(mergedTheme.vars, vars);\n\n      const resolvedDefaultColorScheme = (() => {\n        if (typeof defaultColorScheme === 'string') {\n          return defaultColorScheme;\n        }\n\n        if (defaultMode === 'dark') {\n          return defaultColorScheme.dark;\n        }\n\n        return defaultColorScheme.light;\n      })();\n\n      if (key === resolvedDefaultColorScheme) {\n        styleSheet[':root'] = css;\n      } else {\n        styleSheet[`[${attribute}=\"${key}\"]`] = css;\n      }\n    });\n    React.useEffect(() => {\n      if (colorScheme) {\n        // attaches attribute to <html> because the css variables are attached to :root (html)\n        document.documentElement.setAttribute(attribute, colorScheme);\n      }\n    }, [colorScheme, attribute]);\n    useEnhancedEffect(() => {\n      if (!mode || !enableColorScheme) {\n        return undefined;\n      }\n\n      const priorColorScheme = document.documentElement.style.getPropertyValue('color-scheme'); // `color-scheme` tells browser to render built-in elements according to its value: `light` or `dark`\n\n      if (mode === 'system') {\n        document.documentElement.style.setProperty('color-scheme', systemMode);\n      } else {\n        document.documentElement.style.setProperty('color-scheme', mode);\n      }\n\n      return () => {\n        document.documentElement.style.setProperty('color-scheme', priorColorScheme);\n      };\n    }, [mode, systemMode]);\n    React.useEffect(() => {\n      let timer;\n\n      if (disableTransitionOnChange && hasMounted.current) {\n        // credit: https://github.com/pacocoursey/next-themes/blob/b5c2bad50de2d61ad7b52a9c5cdc801a78507d7a/index.tsx#L313\n        const css = document.createElement('style');\n        css.appendChild(document.createTextNode(DISABLE_CSS_TRANSITION));\n        document.head.appendChild(css); // Force browser repaint\n\n        (() => window.getComputedStyle(document.body))();\n\n        timer = setTimeout(() => {\n          document.head.removeChild(css);\n        }, 1);\n      }\n\n      return () => {\n        clearTimeout(timer);\n      };\n    }, [colorScheme]);\n    React.useEffect(() => {\n      hasMounted.current = true;\n      return () => {\n        hasMounted.current = false;\n      };\n    }, []);\n    return /*#__PURE__*/_jsxs(ColorSchemeContext.Provider, {\n      value: {\n        mode,\n        setMode,\n        lightColorScheme,\n        darkColorScheme,\n        colorScheme,\n        setColorScheme,\n        allColorSchemes\n      },\n      children: [/*#__PURE__*/_jsx(GlobalStyles, {\n        styles: {\n          ':root': rootCss\n        }\n      }), /*#__PURE__*/_jsx(GlobalStyles, {\n        styles: styleSheet\n      }), /*#__PURE__*/_jsx(ThemeProvider, {\n        theme: resolveTheme ? resolveTheme(mergedTheme) : mergedTheme,\n        children: children\n      })]\n    });\n  }\n\n  process.env.NODE_ENV !== \"production\" ? CssVarsProvider.propTypes = {\n    /**\n     * The body attribute name to attach colorScheme.\n     */\n    attribute: PropTypes.string,\n\n    /**\n     * The component tree.\n     */\n    children: PropTypes.node,\n\n    /**\n     * The initial color scheme used.\n     */\n    defaultColorScheme: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n\n    /**\n     * The initial mode used.\n     */\n    defaultMode: PropTypes.string,\n\n    /**\n     * The key in the local storage used to store current color scheme.\n     */\n    modeStorageKey: PropTypes.string,\n\n    /**\n     * CSS variable prefix.\n     */\n    prefix: PropTypes.string,\n\n    /**\n     * The calculated theme object that will be passed through context.\n     */\n    theme: PropTypes.object\n  } : void 0;\n  return {\n    CssVarsProvider,\n    useColorScheme,\n    getInitColorSchemeScript\n  };\n}"]},"metadata":{},"sourceType":"module"}