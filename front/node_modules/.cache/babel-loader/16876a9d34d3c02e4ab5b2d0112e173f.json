{"ast":null,"code":"import * as React from 'react';\nlet globalId = 0;\n\nfunction useGlobalId(idOverride) {\n  const [defaultId, setDefaultId] = React.useState(idOverride);\n  const id = idOverride || defaultId;\n  React.useEffect(() => {\n    if (defaultId == null) {\n      // Fallback to this default id when possible.\n      // Use the incrementing value for client-side rendering only.\n      // We can't use it server-side.\n      // If you want to use random values please consider the Birthday Problem: https://en.wikipedia.org/wiki/Birthday_problem\n      globalId += 1;\n      setDefaultId(`mui-${globalId}`);\n    }\n  }, [defaultId]);\n  return id;\n} // eslint-disable-next-line no-useless-concat -- Workaround for https://github.com/webpack/webpack/issues/14814\n\n\nconst maybeReactUseId = React['useId' + ''];\n/**\n *\n * @example <div id={useId()} />\n * @param idOverride\n * @returns {string}\n */\n\nexport default function useId(idOverride) {\n  if (maybeReactUseId !== undefined) {\n    const reactId = maybeReactUseId();\n    return idOverride != null ? idOverride : reactId;\n  } // eslint-disable-next-line react-hooks/rules-of-hooks -- `React.useId` is invariant at runtime.\n\n\n  return useGlobalId(idOverride);\n}","map":{"version":3,"sources":["/Users/juancarlossilva/Documents/apps/backend-test/front/node_modules/@mui/utils/esm/useId.js"],"names":["React","globalId","useGlobalId","idOverride","defaultId","setDefaultId","useState","id","useEffect","maybeReactUseId","useId","undefined","reactId"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,IAAIC,QAAQ,GAAG,CAAf;;AAEA,SAASC,WAAT,CAAqBC,UAArB,EAAiC;AAC/B,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BL,KAAK,CAACM,QAAN,CAAeH,UAAf,CAAlC;AACA,QAAMI,EAAE,GAAGJ,UAAU,IAAIC,SAAzB;AACAJ,EAAAA,KAAK,CAACQ,SAAN,CAAgB,MAAM;AACpB,QAAIJ,SAAS,IAAI,IAAjB,EAAuB;AACrB;AACA;AACA;AACA;AACAH,MAAAA,QAAQ,IAAI,CAAZ;AACAI,MAAAA,YAAY,CAAE,OAAMJ,QAAS,EAAjB,CAAZ;AACD;AACF,GATD,EASG,CAACG,SAAD,CATH;AAUA,SAAOG,EAAP;AACD,C,CAAC;;;AAGF,MAAME,eAAe,GAAGT,KAAK,CAAC,UAAU,EAAX,CAA7B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASU,KAAT,CAAeP,UAAf,EAA2B;AACxC,MAAIM,eAAe,KAAKE,SAAxB,EAAmC;AACjC,UAAMC,OAAO,GAAGH,eAAe,EAA/B;AACA,WAAON,UAAU,IAAI,IAAd,GAAqBA,UAArB,GAAkCS,OAAzC;AACD,GAJuC,CAItC;;;AAGF,SAAOV,WAAW,CAACC,UAAD,CAAlB;AACD","sourcesContent":["import * as React from 'react';\nlet globalId = 0;\n\nfunction useGlobalId(idOverride) {\n  const [defaultId, setDefaultId] = React.useState(idOverride);\n  const id = idOverride || defaultId;\n  React.useEffect(() => {\n    if (defaultId == null) {\n      // Fallback to this default id when possible.\n      // Use the incrementing value for client-side rendering only.\n      // We can't use it server-side.\n      // If you want to use random values please consider the Birthday Problem: https://en.wikipedia.org/wiki/Birthday_problem\n      globalId += 1;\n      setDefaultId(`mui-${globalId}`);\n    }\n  }, [defaultId]);\n  return id;\n} // eslint-disable-next-line no-useless-concat -- Workaround for https://github.com/webpack/webpack/issues/14814\n\n\nconst maybeReactUseId = React['useId' + ''];\n/**\n *\n * @example <div id={useId()} />\n * @param idOverride\n * @returns {string}\n */\n\nexport default function useId(idOverride) {\n  if (maybeReactUseId !== undefined) {\n    const reactId = maybeReactUseId();\n    return idOverride != null ? idOverride : reactId;\n  } // eslint-disable-next-line react-hooks/rules-of-hooks -- `React.useId` is invariant at runtime.\n\n\n  return useGlobalId(idOverride);\n}"]},"metadata":{},"sourceType":"module"}