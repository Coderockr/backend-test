{"ast":null,"code":"import * as React from 'react';\nimport { unstable_useControlled as useControlled } from '@mui/utils';\nimport { ActionTypes } from './types';\nimport areArraysEqual from '../utils/areArraysEqual';\n/**\n * Triggers change event handlers when reducer returns changed state.\n */\n\nfunction useReducerReturnValueHandler(state, value, options, optionComparer, setValueState, onValueChange, onHighlightChange) {\n  const valueRef = React.useRef(value);\n  valueRef.current = value;\n  const onValueChangeRef = React.useRef(onValueChange);\n  onValueChangeRef.current = onValueChange;\n  const onHighlightChangeRef = React.useRef(onHighlightChange);\n  onHighlightChangeRef.current = onHighlightChange;\n  React.useEffect(() => {\n    if (Array.isArray(state.selectedValue)) {\n      if (areArraysEqual(state.selectedValue, valueRef.current)) {\n        return;\n      }\n    } else if (state.selectedValue == null && valueRef.current == null || state.selectedValue != null && valueRef.current != null && optionComparer.current(state.selectedValue, valueRef.current)) {\n      return;\n    }\n\n    setValueState(state.selectedValue);\n\n    if (state.selectedValue != null) {\n      var _onValueChangeRef$cur; // @ts-ignore We know that selectedValue has the correct type depending on `selectMultiple` prop.\n\n\n      (_onValueChangeRef$cur = onValueChangeRef.current) == null ? void 0 : _onValueChangeRef$cur.call(onValueChangeRef, state.selectedValue);\n    }\n  }, [state.selectedValue, setValueState, optionComparer]);\n  React.useEffect(() => {\n    // Fire the highlightChange event when reducer returns changed `highlightedIndex`.\n    if (state.highlightedIndex === -1) {\n      var _onHighlightChangeRef;\n\n      (_onHighlightChangeRef = onHighlightChangeRef.current) == null ? void 0 : _onHighlightChangeRef.call(onHighlightChangeRef, null);\n    } else {\n      var _onHighlightChangeRef2;\n\n      (_onHighlightChangeRef2 = onHighlightChangeRef.current) == null ? void 0 : _onHighlightChangeRef2.call(onHighlightChangeRef, options[state.highlightedIndex]);\n    }\n  }, [state.highlightedIndex, options]);\n}\n\nexport default function useControllableReducer(internalReducer, externalReducer, props) {\n  const {\n    value: controlledValue,\n    defaultValue,\n    onChange: onValueChange,\n    onHighlightChange,\n    options,\n    optionComparer\n  } = props;\n  const propsRef = React.useRef(props);\n  propsRef.current = props;\n  const [value, setValueState] = useControlled({\n    controlled: controlledValue,\n    default: defaultValue,\n    name: 'useListbox'\n  });\n  const previousValueRef = React.useRef(null);\n  const [state, dispatch] = React.useReducer(externalReducer != null ? externalReducer : internalReducer, {\n    highlightedIndex: -1,\n    selectedValue: value\n  });\n  const optionComparerRef = React.useRef(optionComparer);\n  optionComparerRef.current = optionComparer;\n  React.useEffect(() => {\n    // Detect external changes to the controlled `value` prop and update the state.\n    if (controlledValue === undefined) {\n      return;\n    }\n\n    if (Array.isArray(controlledValue) && Array.isArray(previousValueRef.current) && areArraysEqual(previousValueRef.current, controlledValue, optionComparerRef.current)) {\n      // `value` is an array and it did not change.\n      return;\n    }\n\n    if (!Array.isArray(controlledValue) && controlledValue != null && previousValueRef.current != null && optionComparerRef.current(controlledValue, previousValueRef.current)) {\n      // `value` is a single option and it did not change.\n      return;\n    }\n\n    previousValueRef.current = controlledValue;\n    dispatch({\n      type: ActionTypes.setControlledValue,\n      value: controlledValue,\n      props: propsRef.current\n    });\n  }, [controlledValue]);\n  useReducerReturnValueHandler(state, value, options, optionComparerRef, setValueState, onValueChange, onHighlightChange);\n  return [state, dispatch];\n}","map":{"version":3,"sources":["/Users/juancarlossilva/Documents/apps/backend-test/front/node_modules/@mui/base/ListboxUnstyled/useControllableReducer.js"],"names":["React","unstable_useControlled","useControlled","ActionTypes","areArraysEqual","useReducerReturnValueHandler","state","value","options","optionComparer","setValueState","onValueChange","onHighlightChange","valueRef","useRef","current","onValueChangeRef","onHighlightChangeRef","useEffect","Array","isArray","selectedValue","_onValueChangeRef$cur","call","highlightedIndex","_onHighlightChangeRef","_onHighlightChangeRef2","useControllableReducer","internalReducer","externalReducer","props","controlledValue","defaultValue","onChange","propsRef","controlled","default","name","previousValueRef","dispatch","useReducer","optionComparerRef","undefined","type","setControlledValue"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { unstable_useControlled as useControlled } from '@mui/utils';\nimport { ActionTypes } from './types';\nimport areArraysEqual from '../utils/areArraysEqual';\n/**\n * Triggers change event handlers when reducer returns changed state.\n */\n\nfunction useReducerReturnValueHandler(state, value, options, optionComparer, setValueState, onValueChange, onHighlightChange) {\n  const valueRef = React.useRef(value);\n  valueRef.current = value;\n  const onValueChangeRef = React.useRef(onValueChange);\n  onValueChangeRef.current = onValueChange;\n  const onHighlightChangeRef = React.useRef(onHighlightChange);\n  onHighlightChangeRef.current = onHighlightChange;\n  React.useEffect(() => {\n    if (Array.isArray(state.selectedValue)) {\n      if (areArraysEqual(state.selectedValue, valueRef.current)) {\n        return;\n      }\n    } else if (state.selectedValue == null && valueRef.current == null || state.selectedValue != null && valueRef.current != null && optionComparer.current(state.selectedValue, valueRef.current)) {\n      return;\n    }\n\n    setValueState(state.selectedValue);\n\n    if (state.selectedValue != null) {\n      var _onValueChangeRef$cur;\n\n      // @ts-ignore We know that selectedValue has the correct type depending on `selectMultiple` prop.\n      (_onValueChangeRef$cur = onValueChangeRef.current) == null ? void 0 : _onValueChangeRef$cur.call(onValueChangeRef, state.selectedValue);\n    }\n  }, [state.selectedValue, setValueState, optionComparer]);\n  React.useEffect(() => {\n    // Fire the highlightChange event when reducer returns changed `highlightedIndex`.\n    if (state.highlightedIndex === -1) {\n      var _onHighlightChangeRef;\n\n      (_onHighlightChangeRef = onHighlightChangeRef.current) == null ? void 0 : _onHighlightChangeRef.call(onHighlightChangeRef, null);\n    } else {\n      var _onHighlightChangeRef2;\n\n      (_onHighlightChangeRef2 = onHighlightChangeRef.current) == null ? void 0 : _onHighlightChangeRef2.call(onHighlightChangeRef, options[state.highlightedIndex]);\n    }\n  }, [state.highlightedIndex, options]);\n}\n\nexport default function useControllableReducer(internalReducer, externalReducer, props) {\n  const {\n    value: controlledValue,\n    defaultValue,\n    onChange: onValueChange,\n    onHighlightChange,\n    options,\n    optionComparer\n  } = props;\n  const propsRef = React.useRef(props);\n  propsRef.current = props;\n  const [value, setValueState] = useControlled({\n    controlled: controlledValue,\n    default: defaultValue,\n    name: 'useListbox'\n  });\n  const previousValueRef = React.useRef(null);\n  const [state, dispatch] = React.useReducer(externalReducer != null ? externalReducer : internalReducer, {\n    highlightedIndex: -1,\n    selectedValue: value\n  });\n  const optionComparerRef = React.useRef(optionComparer);\n  optionComparerRef.current = optionComparer;\n  React.useEffect(() => {\n    // Detect external changes to the controlled `value` prop and update the state.\n    if (controlledValue === undefined) {\n      return;\n    }\n\n    if (Array.isArray(controlledValue) && Array.isArray(previousValueRef.current) && areArraysEqual(previousValueRef.current, controlledValue, optionComparerRef.current)) {\n      // `value` is an array and it did not change.\n      return;\n    }\n\n    if (!Array.isArray(controlledValue) && controlledValue != null && previousValueRef.current != null && optionComparerRef.current(controlledValue, previousValueRef.current)) {\n      // `value` is a single option and it did not change.\n      return;\n    }\n\n    previousValueRef.current = controlledValue;\n    dispatch({\n      type: ActionTypes.setControlledValue,\n      value: controlledValue,\n      props: propsRef.current\n    });\n  }, [controlledValue]);\n  useReducerReturnValueHandler(state, value, options, optionComparerRef, setValueState, onValueChange, onHighlightChange);\n  return [state, dispatch];\n}"]},"metadata":{},"sourceType":"module"}