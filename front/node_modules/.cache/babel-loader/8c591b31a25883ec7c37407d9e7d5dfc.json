{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"calendars\", \"className\", \"currentlySelectingRangeEnd\", \"date\", \"DateInputProps\", \"defaultCalendarMonth\", \"disableAutoMonthSwitching\", \"disableFuture\", \"disableHighlightToday\", \"disablePast\", \"endText\", \"isMobileKeyboardViewOpen\", \"maxDate\", \"minDate\", \"onDateChange\", \"onMonthChange\", \"open\", \"reduceAnimations\", \"setCurrentlySelectingRangeEnd\", \"shouldDisableDate\", \"showToolbar\", \"startText\", \"toggleMobileKeyboardView\", \"toolbarFormat\", \"toolbarTitle\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { isRangeValid } from '../internal/pickers/date-utils';\nimport { calculateRangeChange } from './date-range-manager';\nimport { useUtils } from '../internal/pickers/hooks/useUtils';\nimport DateRangePickerToolbar from './DateRangePickerToolbar';\nimport { useCalendarState } from '../CalendarPicker/useCalendarState';\nimport { DateRangePickerViewMobile } from './DateRangePickerViewMobile';\nimport { WrapperVariantContext } from '../internal/pickers/wrappers/WrapperVariantContext';\nimport { MobileKeyboardInputView } from '../internal/pickers/Picker/Picker';\nimport DateRangePickerInput from './DateRangePickerInput';\nimport { defaultReduceAnimations } from '../CalendarPicker/CalendarPicker';\nimport DateRangePickerViewDesktop from './DateRangePickerViewDesktop';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n/**\n * @ignore - internal component.\n */\n\nexport function DateRangePickerView(props) {\n  const {\n    calendars,\n    className,\n    currentlySelectingRangeEnd,\n    date,\n    DateInputProps,\n    defaultCalendarMonth,\n    disableAutoMonthSwitching = false,\n    disableFuture,\n    disableHighlightToday,\n    disablePast,\n    endText,\n    isMobileKeyboardViewOpen,\n    maxDate,\n    minDate,\n    onDateChange,\n    onMonthChange,\n    open,\n    reduceAnimations = defaultReduceAnimations,\n    setCurrentlySelectingRangeEnd,\n    shouldDisableDate,\n    showToolbar,\n    startText,\n    toggleMobileKeyboardView,\n    toolbarFormat,\n    toolbarTitle\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const utils = useUtils();\n  const wrapperVariant = React.useContext(WrapperVariantContext);\n  const [start, end] = date;\n  const {\n    changeMonth,\n    calendarState,\n    isDateDisabled,\n    onMonthSwitchingAnimationEnd,\n    changeFocusedDay\n  } = useCalendarState({\n    date: start || end,\n    defaultCalendarMonth,\n    disableFuture,\n    disablePast,\n    disableSwitchToMonthOnDayFocus: true,\n    maxDate,\n    minDate,\n    onMonthChange,\n    reduceAnimations,\n    shouldDisableDate\n  });\n  const toShowToolbar = showToolbar != null ? showToolbar : wrapperVariant !== 'desktop';\n\n  const scrollToDayIfNeeded = day => {\n    if (!day || !utils.isValid(day) || isDateDisabled(day)) {\n      return;\n    }\n\n    const currentlySelectedDate = currentlySelectingRangeEnd === 'start' ? start : end;\n\n    if (currentlySelectedDate === null) {\n      // do not scroll if one of ages is not selected\n      return;\n    }\n\n    const displayingMonthRange = wrapperVariant === 'mobile' ? 0 : calendars - 1;\n    const currentMonthNumber = utils.getMonth(calendarState.currentMonth);\n    const requestedMonthNumber = utils.getMonth(day);\n\n    if (!utils.isSameYear(calendarState.currentMonth, day) || requestedMonthNumber < currentMonthNumber || requestedMonthNumber > currentMonthNumber + displayingMonthRange) {\n      const newMonth = currentlySelectingRangeEnd === 'start' ? currentlySelectedDate : // If need to focus end, scroll to the state when \"end\" is displaying in the last calendar\n      utils.addMonths(currentlySelectedDate, -displayingMonthRange);\n      changeMonth(newMonth);\n    }\n  };\n\n  React.useEffect(() => {\n    if (disableAutoMonthSwitching || !open) {\n      return;\n    }\n\n    scrollToDayIfNeeded(currentlySelectingRangeEnd === 'start' ? start : end);\n  }, [currentlySelectingRangeEnd, date]); // eslint-disable-line\n\n  const handleChange = React.useCallback(newDate => {\n    const {\n      nextSelection,\n      newRange\n    } = calculateRangeChange({\n      newDate,\n      utils,\n      range: date,\n      currentlySelectingRangeEnd\n    });\n    setCurrentlySelectingRangeEnd(nextSelection);\n    const isFullRangeSelected = currentlySelectingRangeEnd === 'end' && isRangeValid(utils, newRange);\n    onDateChange(newRange, wrapperVariant, isFullRangeSelected ? 'finish' : 'partial');\n  }, [currentlySelectingRangeEnd, date, onDateChange, setCurrentlySelectingRangeEnd, utils, wrapperVariant]);\n\n  const renderView = () => {\n    const sharedCalendarProps = _extends({\n      date,\n      isDateDisabled,\n      changeFocusedDay,\n      onChange: handleChange,\n      reduceAnimations,\n      disableHighlightToday,\n      onMonthSwitchingAnimationEnd,\n      changeMonth,\n      currentlySelectingRangeEnd,\n      disableFuture,\n      disablePast,\n      minDate,\n      maxDate\n    }, calendarState, other);\n\n    switch (wrapperVariant) {\n      case 'desktop':\n        {\n          return /*#__PURE__*/_jsx(DateRangePickerViewDesktop, _extends({\n            calendars: calendars\n          }, sharedCalendarProps));\n        }\n\n      default:\n        {\n          return /*#__PURE__*/_jsx(DateRangePickerViewMobile, _extends({}, sharedCalendarProps));\n        }\n    }\n  };\n\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: className,\n    children: [toShowToolbar && /*#__PURE__*/_jsx(DateRangePickerToolbar, {\n      date: date,\n      isMobileKeyboardViewOpen: isMobileKeyboardViewOpen,\n      toggleMobileKeyboardView: toggleMobileKeyboardView,\n      currentlySelectingRangeEnd: currentlySelectingRangeEnd,\n      setCurrentlySelectingRangeEnd: setCurrentlySelectingRangeEnd,\n      startText: startText,\n      endText: endText,\n      toolbarTitle: toolbarTitle,\n      toolbarFormat: toolbarFormat\n    }), isMobileKeyboardViewOpen ? /*#__PURE__*/_jsx(MobileKeyboardInputView, {\n      children: /*#__PURE__*/_jsx(DateRangePickerInput, _extends({\n        disableOpenPicker: true,\n        ignoreInvalidInputs: true\n      }, DateInputProps))\n    }) : renderView()]\n  });\n}\nprocess.env.NODE_ENV !== \"production\" ? DateRangePickerView.propTypes = {\n  calendars: PropTypes.oneOf([1, 2, 3]),\n  disableAutoMonthSwitching: PropTypes.bool\n} : void 0;","map":{"version":3,"sources":["/Users/juancarlossilva/Documents/apps/backend-test/front/node_modules/@mui/lab/DateRangePicker/DateRangePickerView.js"],"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","PropTypes","isRangeValid","calculateRangeChange","useUtils","DateRangePickerToolbar","useCalendarState","DateRangePickerViewMobile","WrapperVariantContext","MobileKeyboardInputView","DateRangePickerInput","defaultReduceAnimations","DateRangePickerViewDesktop","jsx","_jsx","jsxs","_jsxs","DateRangePickerView","props","calendars","className","currentlySelectingRangeEnd","date","DateInputProps","defaultCalendarMonth","disableAutoMonthSwitching","disableFuture","disableHighlightToday","disablePast","endText","isMobileKeyboardViewOpen","maxDate","minDate","onDateChange","onMonthChange","open","reduceAnimations","setCurrentlySelectingRangeEnd","shouldDisableDate","showToolbar","startText","toggleMobileKeyboardView","toolbarFormat","toolbarTitle","other","utils","wrapperVariant","useContext","start","end","changeMonth","calendarState","isDateDisabled","onMonthSwitchingAnimationEnd","changeFocusedDay","disableSwitchToMonthOnDayFocus","toShowToolbar","scrollToDayIfNeeded","day","isValid","currentlySelectedDate","displayingMonthRange","currentMonthNumber","getMonth","currentMonth","requestedMonthNumber","isSameYear","newMonth","addMonths","useEffect","handleChange","useCallback","newDate","nextSelection","newRange","range","isFullRangeSelected","renderView","sharedCalendarProps","onChange","children","disableOpenPicker","ignoreInvalidInputs","process","env","NODE_ENV","propTypes","oneOf","bool"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"calendars\", \"className\", \"currentlySelectingRangeEnd\", \"date\", \"DateInputProps\", \"defaultCalendarMonth\", \"disableAutoMonthSwitching\", \"disableFuture\", \"disableHighlightToday\", \"disablePast\", \"endText\", \"isMobileKeyboardViewOpen\", \"maxDate\", \"minDate\", \"onDateChange\", \"onMonthChange\", \"open\", \"reduceAnimations\", \"setCurrentlySelectingRangeEnd\", \"shouldDisableDate\", \"showToolbar\", \"startText\", \"toggleMobileKeyboardView\", \"toolbarFormat\", \"toolbarTitle\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { isRangeValid } from '../internal/pickers/date-utils';\nimport { calculateRangeChange } from './date-range-manager';\nimport { useUtils } from '../internal/pickers/hooks/useUtils';\nimport DateRangePickerToolbar from './DateRangePickerToolbar';\nimport { useCalendarState } from '../CalendarPicker/useCalendarState';\nimport { DateRangePickerViewMobile } from './DateRangePickerViewMobile';\nimport { WrapperVariantContext } from '../internal/pickers/wrappers/WrapperVariantContext';\nimport { MobileKeyboardInputView } from '../internal/pickers/Picker/Picker';\nimport DateRangePickerInput from './DateRangePickerInput';\nimport { defaultReduceAnimations } from '../CalendarPicker/CalendarPicker';\nimport DateRangePickerViewDesktop from './DateRangePickerViewDesktop';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\n/**\n * @ignore - internal component.\n */\nexport function DateRangePickerView(props) {\n  const {\n    calendars,\n    className,\n    currentlySelectingRangeEnd,\n    date,\n    DateInputProps,\n    defaultCalendarMonth,\n    disableAutoMonthSwitching = false,\n    disableFuture,\n    disableHighlightToday,\n    disablePast,\n    endText,\n    isMobileKeyboardViewOpen,\n    maxDate,\n    minDate,\n    onDateChange,\n    onMonthChange,\n    open,\n    reduceAnimations = defaultReduceAnimations,\n    setCurrentlySelectingRangeEnd,\n    shouldDisableDate,\n    showToolbar,\n    startText,\n    toggleMobileKeyboardView,\n    toolbarFormat,\n    toolbarTitle\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const utils = useUtils();\n  const wrapperVariant = React.useContext(WrapperVariantContext);\n  const [start, end] = date;\n  const {\n    changeMonth,\n    calendarState,\n    isDateDisabled,\n    onMonthSwitchingAnimationEnd,\n    changeFocusedDay\n  } = useCalendarState({\n    date: start || end,\n    defaultCalendarMonth,\n    disableFuture,\n    disablePast,\n    disableSwitchToMonthOnDayFocus: true,\n    maxDate,\n    minDate,\n    onMonthChange,\n    reduceAnimations,\n    shouldDisableDate\n  });\n  const toShowToolbar = showToolbar != null ? showToolbar : wrapperVariant !== 'desktop';\n\n  const scrollToDayIfNeeded = day => {\n    if (!day || !utils.isValid(day) || isDateDisabled(day)) {\n      return;\n    }\n\n    const currentlySelectedDate = currentlySelectingRangeEnd === 'start' ? start : end;\n\n    if (currentlySelectedDate === null) {\n      // do not scroll if one of ages is not selected\n      return;\n    }\n\n    const displayingMonthRange = wrapperVariant === 'mobile' ? 0 : calendars - 1;\n    const currentMonthNumber = utils.getMonth(calendarState.currentMonth);\n    const requestedMonthNumber = utils.getMonth(day);\n\n    if (!utils.isSameYear(calendarState.currentMonth, day) || requestedMonthNumber < currentMonthNumber || requestedMonthNumber > currentMonthNumber + displayingMonthRange) {\n      const newMonth = currentlySelectingRangeEnd === 'start' ? currentlySelectedDate : // If need to focus end, scroll to the state when \"end\" is displaying in the last calendar\n      utils.addMonths(currentlySelectedDate, -displayingMonthRange);\n      changeMonth(newMonth);\n    }\n  };\n\n  React.useEffect(() => {\n    if (disableAutoMonthSwitching || !open) {\n      return;\n    }\n\n    scrollToDayIfNeeded(currentlySelectingRangeEnd === 'start' ? start : end);\n  }, [currentlySelectingRangeEnd, date]); // eslint-disable-line\n\n  const handleChange = React.useCallback(newDate => {\n    const {\n      nextSelection,\n      newRange\n    } = calculateRangeChange({\n      newDate,\n      utils,\n      range: date,\n      currentlySelectingRangeEnd\n    });\n    setCurrentlySelectingRangeEnd(nextSelection);\n    const isFullRangeSelected = currentlySelectingRangeEnd === 'end' && isRangeValid(utils, newRange);\n    onDateChange(newRange, wrapperVariant, isFullRangeSelected ? 'finish' : 'partial');\n  }, [currentlySelectingRangeEnd, date, onDateChange, setCurrentlySelectingRangeEnd, utils, wrapperVariant]);\n\n  const renderView = () => {\n    const sharedCalendarProps = _extends({\n      date,\n      isDateDisabled,\n      changeFocusedDay,\n      onChange: handleChange,\n      reduceAnimations,\n      disableHighlightToday,\n      onMonthSwitchingAnimationEnd,\n      changeMonth,\n      currentlySelectingRangeEnd,\n      disableFuture,\n      disablePast,\n      minDate,\n      maxDate\n    }, calendarState, other);\n\n    switch (wrapperVariant) {\n      case 'desktop':\n        {\n          return /*#__PURE__*/_jsx(DateRangePickerViewDesktop, _extends({\n            calendars: calendars\n          }, sharedCalendarProps));\n        }\n\n      default:\n        {\n          return /*#__PURE__*/_jsx(DateRangePickerViewMobile, _extends({}, sharedCalendarProps));\n        }\n    }\n  };\n\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: className,\n    children: [toShowToolbar && /*#__PURE__*/_jsx(DateRangePickerToolbar, {\n      date: date,\n      isMobileKeyboardViewOpen: isMobileKeyboardViewOpen,\n      toggleMobileKeyboardView: toggleMobileKeyboardView,\n      currentlySelectingRangeEnd: currentlySelectingRangeEnd,\n      setCurrentlySelectingRangeEnd: setCurrentlySelectingRangeEnd,\n      startText: startText,\n      endText: endText,\n      toolbarTitle: toolbarTitle,\n      toolbarFormat: toolbarFormat\n    }), isMobileKeyboardViewOpen ? /*#__PURE__*/_jsx(MobileKeyboardInputView, {\n      children: /*#__PURE__*/_jsx(DateRangePickerInput, _extends({\n        disableOpenPicker: true,\n        ignoreInvalidInputs: true\n      }, DateInputProps))\n    }) : renderView()]\n  });\n}\nprocess.env.NODE_ENV !== \"production\" ? DateRangePickerView.propTypes = {\n  calendars: PropTypes.oneOf([1, 2, 3]),\n  disableAutoMonthSwitching: PropTypes.bool\n} : void 0;"]},"metadata":{},"sourceType":"module"}