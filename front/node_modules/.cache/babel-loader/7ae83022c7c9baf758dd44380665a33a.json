{"ast":null,"code":"export const CLOCK_WIDTH = 220;\nexport const CLOCK_HOUR_WIDTH = 36;\nconst clockCenter = {\n  x: CLOCK_WIDTH / 2,\n  y: CLOCK_WIDTH / 2\n};\nconst baseClockPoint = {\n  x: clockCenter.x,\n  y: 0\n};\nconst cx = baseClockPoint.x - clockCenter.x;\nconst cy = baseClockPoint.y - clockCenter.y;\n\nconst rad2deg = rad => rad * (180 / Math.PI);\n\nconst getAngleValue = (step, offsetX, offsetY) => {\n  const x = offsetX - clockCenter.x;\n  const y = offsetY - clockCenter.y;\n  const atan = Math.atan2(cx, cy) - Math.atan2(x, y);\n  let deg = rad2deg(atan);\n  deg = Math.round(deg / step) * step;\n  deg %= 360;\n  const value = Math.floor(deg / step) || 0;\n  const delta = x ** 2 + y ** 2;\n  const distance = Math.sqrt(delta);\n  return {\n    value,\n    distance\n  };\n};\n\nexport const getMinutes = function (offsetX, offsetY) {\n  let step = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  const angleStep = step * 6;\n  let {\n    value\n  } = getAngleValue(angleStep, offsetX, offsetY);\n  value = value * step % 60;\n  return value;\n};\nexport const getHours = (offsetX, offsetY, ampm) => {\n  const {\n    value,\n    distance\n  } = getAngleValue(30, offsetX, offsetY);\n  let hour = value || 12;\n\n  if (!ampm) {\n    if (distance < CLOCK_WIDTH / 2 - CLOCK_HOUR_WIDTH) {\n      hour += 12;\n      hour %= 24;\n    }\n  } else {\n    hour %= 12;\n  }\n\n  return hour;\n};","map":{"version":3,"sources":["/Users/juancarlossilva/Documents/apps/backend-test/front/node_modules/@mui/lab/ClockPicker/shared.js"],"names":["CLOCK_WIDTH","CLOCK_HOUR_WIDTH","clockCenter","x","y","baseClockPoint","cx","cy","rad2deg","rad","Math","PI","getAngleValue","step","offsetX","offsetY","atan","atan2","deg","round","value","floor","delta","distance","sqrt","getMinutes","angleStep","getHours","ampm","hour"],"mappings":"AAAA,OAAO,MAAMA,WAAW,GAAG,GAApB;AACP,OAAO,MAAMC,gBAAgB,GAAG,EAAzB;AACP,MAAMC,WAAW,GAAG;AAClBC,EAAAA,CAAC,EAAEH,WAAW,GAAG,CADC;AAElBI,EAAAA,CAAC,EAAEJ,WAAW,GAAG;AAFC,CAApB;AAIA,MAAMK,cAAc,GAAG;AACrBF,EAAAA,CAAC,EAAED,WAAW,CAACC,CADM;AAErBC,EAAAA,CAAC,EAAE;AAFkB,CAAvB;AAIA,MAAME,EAAE,GAAGD,cAAc,CAACF,CAAf,GAAmBD,WAAW,CAACC,CAA1C;AACA,MAAMI,EAAE,GAAGF,cAAc,CAACD,CAAf,GAAmBF,WAAW,CAACE,CAA1C;;AAEA,MAAMI,OAAO,GAAGC,GAAG,IAAIA,GAAG,IAAI,MAAMC,IAAI,CAACC,EAAf,CAA1B;;AAEA,MAAMC,aAAa,GAAG,CAACC,IAAD,EAAOC,OAAP,EAAgBC,OAAhB,KAA4B;AAChD,QAAMZ,CAAC,GAAGW,OAAO,GAAGZ,WAAW,CAACC,CAAhC;AACA,QAAMC,CAAC,GAAGW,OAAO,GAAGb,WAAW,CAACE,CAAhC;AACA,QAAMY,IAAI,GAAGN,IAAI,CAACO,KAAL,CAAWX,EAAX,EAAeC,EAAf,IAAqBG,IAAI,CAACO,KAAL,CAAWd,CAAX,EAAcC,CAAd,CAAlC;AACA,MAAIc,GAAG,GAAGV,OAAO,CAACQ,IAAD,CAAjB;AACAE,EAAAA,GAAG,GAAGR,IAAI,CAACS,KAAL,CAAWD,GAAG,GAAGL,IAAjB,IAAyBA,IAA/B;AACAK,EAAAA,GAAG,IAAI,GAAP;AACA,QAAME,KAAK,GAAGV,IAAI,CAACW,KAAL,CAAWH,GAAG,GAAGL,IAAjB,KAA0B,CAAxC;AACA,QAAMS,KAAK,GAAGnB,CAAC,IAAI,CAAL,GAASC,CAAC,IAAI,CAA5B;AACA,QAAMmB,QAAQ,GAAGb,IAAI,CAACc,IAAL,CAAUF,KAAV,CAAjB;AACA,SAAO;AACLF,IAAAA,KADK;AAELG,IAAAA;AAFK,GAAP;AAID,CAdD;;AAgBA,OAAO,MAAME,UAAU,GAAG,UAACX,OAAD,EAAUC,OAAV,EAAgC;AAAA,MAAbF,IAAa,uEAAN,CAAM;AACxD,QAAMa,SAAS,GAAGb,IAAI,GAAG,CAAzB;AACA,MAAI;AACFO,IAAAA;AADE,MAEAR,aAAa,CAACc,SAAD,EAAYZ,OAAZ,EAAqBC,OAArB,CAFjB;AAGAK,EAAAA,KAAK,GAAGA,KAAK,GAAGP,IAAR,GAAe,EAAvB;AACA,SAAOO,KAAP;AACD,CAPM;AAQP,OAAO,MAAMO,QAAQ,GAAG,CAACb,OAAD,EAAUC,OAAV,EAAmBa,IAAnB,KAA4B;AAClD,QAAM;AACJR,IAAAA,KADI;AAEJG,IAAAA;AAFI,MAGFX,aAAa,CAAC,EAAD,EAAKE,OAAL,EAAcC,OAAd,CAHjB;AAIA,MAAIc,IAAI,GAAGT,KAAK,IAAI,EAApB;;AAEA,MAAI,CAACQ,IAAL,EAAW;AACT,QAAIL,QAAQ,GAAGvB,WAAW,GAAG,CAAd,GAAkBC,gBAAjC,EAAmD;AACjD4B,MAAAA,IAAI,IAAI,EAAR;AACAA,MAAAA,IAAI,IAAI,EAAR;AACD;AACF,GALD,MAKO;AACLA,IAAAA,IAAI,IAAI,EAAR;AACD;;AAED,SAAOA,IAAP;AACD,CAjBM","sourcesContent":["export const CLOCK_WIDTH = 220;\nexport const CLOCK_HOUR_WIDTH = 36;\nconst clockCenter = {\n  x: CLOCK_WIDTH / 2,\n  y: CLOCK_WIDTH / 2\n};\nconst baseClockPoint = {\n  x: clockCenter.x,\n  y: 0\n};\nconst cx = baseClockPoint.x - clockCenter.x;\nconst cy = baseClockPoint.y - clockCenter.y;\n\nconst rad2deg = rad => rad * (180 / Math.PI);\n\nconst getAngleValue = (step, offsetX, offsetY) => {\n  const x = offsetX - clockCenter.x;\n  const y = offsetY - clockCenter.y;\n  const atan = Math.atan2(cx, cy) - Math.atan2(x, y);\n  let deg = rad2deg(atan);\n  deg = Math.round(deg / step) * step;\n  deg %= 360;\n  const value = Math.floor(deg / step) || 0;\n  const delta = x ** 2 + y ** 2;\n  const distance = Math.sqrt(delta);\n  return {\n    value,\n    distance\n  };\n};\n\nexport const getMinutes = (offsetX, offsetY, step = 1) => {\n  const angleStep = step * 6;\n  let {\n    value\n  } = getAngleValue(angleStep, offsetX, offsetY);\n  value = value * step % 60;\n  return value;\n};\nexport const getHours = (offsetX, offsetY, ampm) => {\n  const {\n    value,\n    distance\n  } = getAngleValue(30, offsetX, offsetY);\n  let hour = value || 12;\n\n  if (!ampm) {\n    if (distance < CLOCK_WIDTH / 2 - CLOCK_HOUR_WIDTH) {\n      hour += 12;\n      hour %= 24;\n    }\n  } else {\n    hour %= 12;\n  }\n\n  return hour;\n};"]},"metadata":{},"sourceType":"module"}