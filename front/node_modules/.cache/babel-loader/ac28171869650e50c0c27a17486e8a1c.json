{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport React from 'react';\nimport { isOptionGroup } from './useSelectProps';\nexport function areOptionsEqual(option1, option2) {\n  return option1.label === option2.label && option1.value === option2.value && option1.disabled === option2.disabled;\n}\nexport function getOptionsFromChildren(children) {\n  if (children == null) {\n    return [];\n  }\n\n  const selectChildren = [];\n  React.Children.forEach(children, node => {\n    var _props, _props2, _element$props$disabl2;\n\n    const nodeChildren = node == null ? void 0 : (_props = node.props) == null ? void 0 : _props.children;\n\n    if ((node == null ? void 0 : (_props2 = node.props) == null ? void 0 : _props2.value) === undefined) {\n      if (nodeChildren != null) {\n        var _element$props$disabl;\n\n        const element = node;\n        const group = {\n          options: getOptionsFromChildren(nodeChildren),\n          label: element.props.label,\n          disabled: (_element$props$disabl = element.props.disabled) != null ? _element$props$disabl : false\n        };\n        selectChildren.push(group);\n      }\n\n      return;\n    }\n\n    const element = node;\n    const option = {\n      value: element.props.value,\n      label: element.props.children,\n      disabled: (_element$props$disabl2 = element.props.disabled) != null ? _element$props$disabl2 : false\n    };\n    selectChildren.push(option);\n  });\n  return selectChildren != null ? selectChildren : [];\n}\nexport function flattenOptionGroups(groupedOptions) {\n  let isGroupDisabled = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  let flatOptions = [];\n  groupedOptions.forEach(optionOrGroup => {\n    if (isOptionGroup(optionOrGroup)) {\n      flatOptions = flatOptions.concat(flattenOptionGroups(optionOrGroup.options, optionOrGroup.disabled));\n    } else {\n      flatOptions.push(_extends({}, optionOrGroup, {\n        disabled: isGroupDisabled || optionOrGroup.disabled\n      }));\n    }\n  });\n  return flatOptions;\n}","map":{"version":3,"sources":["/Users/juancarlossilva/Documents/apps/backend-test/front/node_modules/@mui/base/SelectUnstyled/utils.js"],"names":["_extends","React","isOptionGroup","areOptionsEqual","option1","option2","label","value","disabled","getOptionsFromChildren","children","selectChildren","Children","forEach","node","_props","_props2","_element$props$disabl2","nodeChildren","props","undefined","_element$props$disabl","element","group","options","push","option","flattenOptionGroups","groupedOptions","isGroupDisabled","flatOptions","optionOrGroup","concat"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport React from 'react';\nimport { isOptionGroup } from './useSelectProps';\nexport function areOptionsEqual(option1, option2) {\n  return option1.label === option2.label && option1.value === option2.value && option1.disabled === option2.disabled;\n}\nexport function getOptionsFromChildren(children) {\n  if (children == null) {\n    return [];\n  }\n\n  const selectChildren = [];\n  React.Children.forEach(children, node => {\n    var _props, _props2, _element$props$disabl2;\n\n    const nodeChildren = node == null ? void 0 : (_props = node.props) == null ? void 0 : _props.children;\n\n    if ((node == null ? void 0 : (_props2 = node.props) == null ? void 0 : _props2.value) === undefined) {\n      if (nodeChildren != null) {\n        var _element$props$disabl;\n\n        const element = node;\n        const group = {\n          options: getOptionsFromChildren(nodeChildren),\n          label: element.props.label,\n          disabled: (_element$props$disabl = element.props.disabled) != null ? _element$props$disabl : false\n        };\n        selectChildren.push(group);\n      }\n\n      return;\n    }\n\n    const element = node;\n    const option = {\n      value: element.props.value,\n      label: element.props.children,\n      disabled: (_element$props$disabl2 = element.props.disabled) != null ? _element$props$disabl2 : false\n    };\n    selectChildren.push(option);\n  });\n  return selectChildren != null ? selectChildren : [];\n}\nexport function flattenOptionGroups(groupedOptions, isGroupDisabled = false) {\n  let flatOptions = [];\n  groupedOptions.forEach(optionOrGroup => {\n    if (isOptionGroup(optionOrGroup)) {\n      flatOptions = flatOptions.concat(flattenOptionGroups(optionOrGroup.options, optionOrGroup.disabled));\n    } else {\n      flatOptions.push(_extends({}, optionOrGroup, {\n        disabled: isGroupDisabled || optionOrGroup.disabled\n      }));\n    }\n  });\n  return flatOptions;\n}"]},"metadata":{},"sourceType":"module"}