{"ast":null,"code":"/**\n * React Router v6.2.1\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nimport { createContext, useRef, useState, useLayoutEffect, createElement, useContext, useEffect, useMemo, useCallback, Children, isValidElement, Fragment } from 'react';\nimport { createMemoryHistory, Action, parsePath } from 'history';\n\nfunction invariant(cond, message) {\n  if (!cond) throw new Error(message);\n}\n\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nconst alreadyWarned = {};\n\nfunction warningOnce(key, cond, message) {\n  if (!cond && !alreadyWarned[key]) {\n    alreadyWarned[key] = true;\n    process.env.NODE_ENV !== \"production\" ? warning(false, message) : void 0;\n  }\n} ///////////////////////////////////////////////////////////////////////////////\n// CONTEXT\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Navigator is a \"location changer\"; it's how you get to different locations.\n *\n * Every history instance conforms to the Navigator interface, but the\n * distinction is useful primarily when it comes to the low-level <Router> API\n * where both the location and a navigator must be provided separately in order\n * to avoid \"tearing\" that may occur in a suspense-enabled app if the action\n * and/or location were to be read directly from the history instance.\n */\n\n\nconst NavigationContext = /*#__PURE__*/createContext(null);\n\nif (process.env.NODE_ENV !== \"production\") {\n  NavigationContext.displayName = \"Navigation\";\n}\n\nconst LocationContext = /*#__PURE__*/createContext(null);\n\nif (process.env.NODE_ENV !== \"production\") {\n  LocationContext.displayName = \"Location\";\n}\n\nconst RouteContext = /*#__PURE__*/createContext({\n  outlet: null,\n  matches: []\n});\n\nif (process.env.NODE_ENV !== \"production\") {\n  RouteContext.displayName = \"Route\";\n} ///////////////////////////////////////////////////////////////////////////////\n// COMPONENTS\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * A <Router> that stores all entries in memory.\n *\n * @see https://reactrouter.com/docs/en/v6/api#memoryrouter\n */\n\n\nfunction MemoryRouter(_ref) {\n  let {\n    basename,\n    children,\n    initialEntries,\n    initialIndex\n  } = _ref;\n  let historyRef = useRef();\n\n  if (historyRef.current == null) {\n    historyRef.current = createMemoryHistory({\n      initialEntries,\n      initialIndex\n    });\n  }\n\n  let history = historyRef.current;\n  let [state, setState] = useState({\n    action: history.action,\n    location: history.location\n  });\n  useLayoutEffect(() => history.listen(setState), [history]);\n  return /*#__PURE__*/createElement(Router, {\n    basename: basename,\n    children: children,\n    location: state.location,\n    navigationType: state.action,\n    navigator: history\n  });\n}\n/**\n * Changes the current location.\n *\n * Note: This API is mostly useful in React.Component subclasses that are not\n * able to use hooks. In functional components, we recommend you use the\n * `useNavigate` hook instead.\n *\n * @see https://reactrouter.com/docs/en/v6/api#navigate\n */\n\n\nfunction Navigate(_ref2) {\n  let {\n    to,\n    replace,\n    state\n  } = _ref2;\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? invariant(false, // TODO: This error is probably because they somehow have 2 versions of\n  // the router loaded. We can help them understand how to avoid that.\n  \"<Navigate> may be used only in the context of a <Router> component.\") : invariant(false) : void 0;\n  process.env.NODE_ENV !== \"production\" ? warning(!useContext(NavigationContext).static, \"<Navigate> must not be used on the initial render in a <StaticRouter>. \" + \"This is a no-op, but you should modify your code so the <Navigate> is \" + \"only ever rendered in response to some user interaction or state change.\") : void 0;\n  let navigate = useNavigate();\n  useEffect(() => {\n    navigate(to, {\n      replace,\n      state\n    });\n  });\n  return null;\n}\n/**\n * Renders the child route's element, if there is one.\n *\n * @see https://reactrouter.com/docs/en/v6/api#outlet\n */\n\n\nfunction Outlet(props) {\n  return useOutlet(props.context);\n}\n/**\n * Declares an element that should be rendered at a certain URL path.\n *\n * @see https://reactrouter.com/docs/en/v6/api#route\n */\n\n\nfunction Route(_props) {\n  process.env.NODE_ENV !== \"production\" ? invariant(false, \"A <Route> is only ever to be used as the child of <Routes> element, \" + \"never rendered directly. Please wrap your <Route> in a <Routes>.\") : invariant(false);\n}\n/**\n * Provides location context for the rest of the app.\n *\n * Note: You usually won't render a <Router> directly. Instead, you'll render a\n * router that is more specific to your environment such as a <BrowserRouter>\n * in web browsers or a <StaticRouter> for server rendering.\n *\n * @see https://reactrouter.com/docs/en/v6/api#router\n */\n\n\nfunction Router(_ref3) {\n  let {\n    basename: basenameProp = \"/\",\n    children = null,\n    location: locationProp,\n    navigationType = Action.Pop,\n    navigator,\n    static: staticProp = false\n  } = _ref3;\n  !!useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"You cannot render a <Router> inside another <Router>.\" + \" You should never have more than one in your app.\") : invariant(false) : void 0;\n  let basename = normalizePathname(basenameProp);\n  let navigationContext = useMemo(() => ({\n    basename,\n    navigator,\n    static: staticProp\n  }), [basename, navigator, staticProp]);\n\n  if (typeof locationProp === \"string\") {\n    locationProp = parsePath(locationProp);\n  }\n\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\",\n    state = null,\n    key = \"default\"\n  } = locationProp;\n  let location = useMemo(() => {\n    let trailingPathname = stripBasename(pathname, basename);\n\n    if (trailingPathname == null) {\n      return null;\n    }\n\n    return {\n      pathname: trailingPathname,\n      search,\n      hash,\n      state,\n      key\n    };\n  }, [basename, pathname, search, hash, state, key]);\n  process.env.NODE_ENV !== \"production\" ? warning(location != null, \"<Router basename=\\\"\" + basename + \"\\\"> is not able to match the URL \" + (\"\\\"\" + pathname + search + hash + \"\\\" because it does not start with the \") + \"basename, so the <Router> won't render anything.\") : void 0;\n\n  if (location == null) {\n    return null;\n  }\n\n  return /*#__PURE__*/createElement(NavigationContext.Provider, {\n    value: navigationContext\n  }, /*#__PURE__*/createElement(LocationContext.Provider, {\n    children: children,\n    value: {\n      location,\n      navigationType\n    }\n  }));\n}\n/**\n * A container for a nested tree of <Route> elements that renders the branch\n * that best matches the current location.\n *\n * @see https://reactrouter.com/docs/en/v6/api#routes\n */\n\n\nfunction Routes(_ref4) {\n  let {\n    children,\n    location\n  } = _ref4;\n  return useRoutes(createRoutesFromChildren(children), location);\n} ///////////////////////////////////////////////////////////////////////////////\n// HOOKS\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * Returns the full href for the given \"to\" value. This is useful for building\n * custom links that are also accessible and preserve right-click behavior.\n *\n * @see https://reactrouter.com/docs/en/v6/api#usehref\n */\n\n\nfunction useHref(to) {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useHref() may be used only in the context of a <Router> component.\") : invariant(false) : void 0;\n  let {\n    basename,\n    navigator\n  } = useContext(NavigationContext);\n  let {\n    hash,\n    pathname,\n    search\n  } = useResolvedPath(to);\n  let joinedPathname = pathname;\n\n  if (basename !== \"/\") {\n    let toPathname = getToPathname(to);\n    let endsWithSlash = toPathname != null && toPathname.endsWith(\"/\");\n    joinedPathname = pathname === \"/\" ? basename + (endsWithSlash ? \"/\" : \"\") : joinPaths([basename, pathname]);\n  }\n\n  return navigator.createHref({\n    pathname: joinedPathname,\n    search,\n    hash\n  });\n}\n/**\n * Returns true if this component is a descendant of a <Router>.\n *\n * @see https://reactrouter.com/docs/en/v6/api#useinroutercontext\n */\n\n\nfunction useInRouterContext() {\n  return useContext(LocationContext) != null;\n}\n/**\n * Returns the current location object, which represents the current URL in web\n * browsers.\n *\n * Note: If you're using this it may mean you're doing some of your own\n * \"routing\" in your app, and we'd like to know what your use case is. We may\n * be able to provide something higher-level to better suit your needs.\n *\n * @see https://reactrouter.com/docs/en/v6/api#uselocation\n */\n\n\nfunction useLocation() {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useLocation() may be used only in the context of a <Router> component.\") : invariant(false) : void 0;\n  return useContext(LocationContext).location;\n}\n/**\n * Returns the current navigation action which describes how the router came to\n * the current location, either by a pop, push, or replace on the history stack.\n *\n * @see https://reactrouter.com/docs/en/v6/api#usenavigationtype\n */\n\n\nfunction useNavigationType() {\n  return useContext(LocationContext).navigationType;\n}\n/**\n * Returns true if the URL for the given \"to\" value matches the current URL.\n * This is useful for components that need to know \"active\" state, e.g.\n * <NavLink>.\n *\n * @see https://reactrouter.com/docs/en/v6/api#usematch\n */\n\n\nfunction useMatch(pattern) {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useMatch() may be used only in the context of a <Router> component.\") : invariant(false) : void 0;\n  let {\n    pathname\n  } = useLocation();\n  return useMemo(() => matchPath(pattern, pathname), [pathname, pattern]);\n}\n/**\n * The interface for the navigate() function returned from useNavigate().\n */\n\n/**\n * Returns an imperative method for changing the location. Used by <Link>s, but\n * may also be used by other elements to change the location.\n *\n * @see https://reactrouter.com/docs/en/v6/api#usenavigate\n */\n\n\nfunction useNavigate() {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useNavigate() may be used only in the context of a <Router> component.\") : invariant(false) : void 0;\n  let {\n    basename,\n    navigator\n  } = useContext(NavigationContext);\n  let {\n    matches\n  } = useContext(RouteContext);\n  let {\n    pathname: locationPathname\n  } = useLocation();\n  let routePathnamesJson = JSON.stringify(matches.map(match => match.pathnameBase));\n  let activeRef = useRef(false);\n  useEffect(() => {\n    activeRef.current = true;\n  });\n  let navigate = useCallback(function (to, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    process.env.NODE_ENV !== \"production\" ? warning(activeRef.current, \"You should call navigate() in a React.useEffect(), not when \" + \"your component is first rendered.\") : void 0;\n    if (!activeRef.current) return;\n\n    if (typeof to === \"number\") {\n      navigator.go(to);\n      return;\n    }\n\n    let path = resolveTo(to, JSON.parse(routePathnamesJson), locationPathname);\n\n    if (basename !== \"/\") {\n      path.pathname = joinPaths([basename, path.pathname]);\n    }\n\n    (!!options.replace ? navigator.replace : navigator.push)(path, options.state);\n  }, [basename, navigator, routePathnamesJson, locationPathname]);\n  return navigate;\n}\n\nconst OutletContext = /*#__PURE__*/createContext(null);\n/**\n * Returns the context (if provided) for the child route at this level of the route\n * hierarchy.\n * @see https://reactrouter.com/docs/en/v6/api#useoutletcontext\n */\n\nfunction useOutletContext() {\n  return useContext(OutletContext);\n}\n/**\n * Returns the element for the child route at this level of the route\n * hierarchy. Used internally by <Outlet> to render child routes.\n *\n * @see https://reactrouter.com/docs/en/v6/api#useoutlet\n */\n\n\nfunction useOutlet(context) {\n  let outlet = useContext(RouteContext).outlet;\n\n  if (outlet) {\n    return /*#__PURE__*/createElement(OutletContext.Provider, {\n      value: context\n    }, outlet);\n  }\n\n  return outlet;\n}\n/**\n * Returns an object of key/value pairs of the dynamic params from the current\n * URL that were matched by the route path.\n *\n * @see https://reactrouter.com/docs/en/v6/api#useparams\n */\n\n\nfunction useParams() {\n  let {\n    matches\n  } = useContext(RouteContext);\n  let routeMatch = matches[matches.length - 1];\n  return routeMatch ? routeMatch.params : {};\n}\n/**\n * Resolves the pathname of the given `to` value against the current location.\n *\n * @see https://reactrouter.com/docs/en/v6/api#useresolvedpath\n */\n\n\nfunction useResolvedPath(to) {\n  let {\n    matches\n  } = useContext(RouteContext);\n  let {\n    pathname: locationPathname\n  } = useLocation();\n  let routePathnamesJson = JSON.stringify(matches.map(match => match.pathnameBase));\n  return useMemo(() => resolveTo(to, JSON.parse(routePathnamesJson), locationPathname), [to, routePathnamesJson, locationPathname]);\n}\n/**\n * Returns the element of the route that matched the current location, prepared\n * with the correct context to render the remainder of the route tree. Route\n * elements in the tree must render an <Outlet> to render their child route's\n * element.\n *\n * @see https://reactrouter.com/docs/en/v6/api#useroutes\n */\n\n\nfunction useRoutes(routes, locationArg) {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useRoutes() may be used only in the context of a <Router> component.\") : invariant(false) : void 0;\n  let {\n    matches: parentMatches\n  } = useContext(RouteContext);\n  let routeMatch = parentMatches[parentMatches.length - 1];\n  let parentParams = routeMatch ? routeMatch.params : {};\n  let parentPathname = routeMatch ? routeMatch.pathname : \"/\";\n  let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : \"/\";\n  let parentRoute = routeMatch && routeMatch.route;\n\n  if (process.env.NODE_ENV !== \"production\") {\n    // You won't get a warning about 2 different <Routes> under a <Route>\n    // without a trailing *, but this is a best-effort warning anyway since we\n    // cannot even give the warning unless they land at the parent route.\n    //\n    // Example:\n    //\n    // <Routes>\n    //   {/* This route path MUST end with /* because otherwise\n    //       it will never match /blog/post/123 */}\n    //   <Route path=\"blog\" element={<Blog />} />\n    //   <Route path=\"blog/feed\" element={<BlogFeed />} />\n    // </Routes>\n    //\n    // function Blog() {\n    //   return (\n    //     <Routes>\n    //       <Route path=\"post/:id\" element={<Post />} />\n    //     </Routes>\n    //   );\n    // }\n    let parentPath = parentRoute && parentRoute.path || \"\";\n    warningOnce(parentPathname, !parentRoute || parentPath.endsWith(\"*\"), \"You rendered descendant <Routes> (or called `useRoutes()`) at \" + (\"\\\"\" + parentPathname + \"\\\" (under <Route path=\\\"\" + parentPath + \"\\\">) but the \") + \"parent route path has no trailing \\\"*\\\". This means if you navigate \" + \"deeper, the parent won't match anymore and therefore the child \" + \"routes will never render.\\n\\n\" + (\"Please change the parent <Route path=\\\"\" + parentPath + \"\\\"> to <Route \") + (\"path=\\\"\" + (parentPath === \"/\" ? \"*\" : parentPath + \"/*\") + \"\\\">.\"));\n  }\n\n  let locationFromContext = useLocation();\n  let location;\n\n  if (locationArg) {\n    var _parsedLocationArg$pa;\n\n    let parsedLocationArg = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n    !(parentPathnameBase === \"/\" || ((_parsedLocationArg$pa = parsedLocationArg.pathname) == null ? void 0 : _parsedLocationArg$pa.startsWith(parentPathnameBase))) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"When overriding the location using `<Routes location>` or `useRoutes(routes, location)`, \" + \"the location pathname must begin with the portion of the URL pathname that was \" + (\"matched by all parent routes. The current pathname base is \\\"\" + parentPathnameBase + \"\\\" \") + (\"but pathname \\\"\" + parsedLocationArg.pathname + \"\\\" was given in the `location` prop.\")) : invariant(false) : void 0;\n    location = parsedLocationArg;\n  } else {\n    location = locationFromContext;\n  }\n\n  let pathname = location.pathname || \"/\";\n  let remainingPathname = parentPathnameBase === \"/\" ? pathname : pathname.slice(parentPathnameBase.length) || \"/\";\n  let matches = matchRoutes(routes, {\n    pathname: remainingPathname\n  });\n\n  if (process.env.NODE_ENV !== \"production\") {\n    process.env.NODE_ENV !== \"production\" ? warning(parentRoute || matches != null, \"No routes matched location \\\"\" + location.pathname + location.search + location.hash + \"\\\" \") : void 0;\n    process.env.NODE_ENV !== \"production\" ? warning(matches == null || matches[matches.length - 1].route.element !== undefined, \"Matched leaf route at location \\\"\" + location.pathname + location.search + location.hash + \"\\\" does not have an element. \" + \"This means it will render an <Outlet /> with a null value by default resulting in an \\\"empty\\\" page.\") : void 0;\n  }\n\n  return _renderMatches(matches && matches.map(match => Object.assign({}, match, {\n    params: Object.assign({}, parentParams, match.params),\n    pathname: joinPaths([parentPathnameBase, match.pathname]),\n    pathnameBase: match.pathnameBase === \"/\" ? parentPathnameBase : joinPaths([parentPathnameBase, match.pathnameBase])\n  })), parentMatches);\n} ///////////////////////////////////////////////////////////////////////////////\n// UTILS\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * Creates a route config from a React \"children\" object, which is usually\n * either a `<Route>` element or an array of them. Used internally by\n * `<Routes>` to create a route config from its children.\n *\n * @see https://reactrouter.com/docs/en/v6/api#createroutesfromchildren\n */\n\n\nfunction createRoutesFromChildren(children) {\n  let routes = [];\n  Children.forEach(children, element => {\n    if (! /*#__PURE__*/isValidElement(element)) {\n      // Ignore non-elements. This allows people to more easily inline\n      // conditionals in their route config.\n      return;\n    }\n\n    if (element.type === Fragment) {\n      // Transparently support React.Fragment and its children.\n      routes.push.apply(routes, createRoutesFromChildren(element.props.children));\n      return;\n    }\n\n    !(element.type === Route) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"[\" + (typeof element.type === \"string\" ? element.type : element.type.name) + \"] is not a <Route> component. All component children of <Routes> must be a <Route> or <React.Fragment>\") : invariant(false) : void 0;\n    let route = {\n      caseSensitive: element.props.caseSensitive,\n      element: element.props.element,\n      index: element.props.index,\n      path: element.props.path\n    };\n\n    if (element.props.children) {\n      route.children = createRoutesFromChildren(element.props.children);\n    }\n\n    routes.push(route);\n  });\n  return routes;\n}\n/**\n * The parameters that were parsed from the URL path.\n */\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/docs/en/v6/api#generatepath\n */\n\n\nfunction generatePath(path, params) {\n  if (params === void 0) {\n    params = {};\n  }\n\n  return path.replace(/:(\\w+)/g, (_, key) => {\n    !(params[key] != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Missing \\\":\" + key + \"\\\" param\") : invariant(false) : void 0;\n    return params[key];\n  }).replace(/\\/*\\*$/, _ => params[\"*\"] == null ? \"\" : params[\"*\"].replace(/^\\/*/, \"/\"));\n}\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/docs/en/v6/api#matchroutes\n */\n\n\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n\n  let location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  let matches = null;\n\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch(branches[i], pathname);\n  }\n\n  return matches;\n}\n\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n\n  routes.forEach((route, index) => {\n    let meta = {\n      relativePath: route.path || \"\",\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      !meta.relativePath.startsWith(parentPath) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\") : invariant(false) : void 0;\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta); // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n\n    if (route.children && route.children.length > 0) {\n      !(route.index !== true) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\")) : invariant(false) : void 0;\n      flattenRoutes(route.children, branches, routesMeta, path);\n    } // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n\n\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta\n    });\n  });\n  return branches;\n}\n\nfunction rankRouteBranches(branches) {\n  branches.sort((a, b) => a.score !== b.score ? b.score - a.score // Higher score first\n  : compareIndexes(a.routesMeta.map(meta => meta.childrenIndex), b.routesMeta.map(meta => meta.childrenIndex)));\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\n\nconst isSplat = s => s === \"*\";\n\nfunction computeScore(path, index) {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments.filter(s => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue), initialScore);\n}\n\nfunction compareIndexes(a, b) {\n  let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n  return siblings ? // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\n\nfunction matchRouteBranch(branch, pathname) {\n  let {\n    routesMeta\n  } = branch;\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches = [];\n\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end\n    }, remainingPathname);\n    if (!match) return null;\n    Object.assign(matchedParams, match.params);\n    let route = meta.route;\n    matches.push({\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: joinPaths([matchedPathname, match.pathnameBase]),\n      route\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n/**\n * Renders the result of `matchRoutes()` into a React element.\n */\n\n\nfunction renderMatches(matches) {\n  return _renderMatches(matches);\n}\n\nfunction _renderMatches(matches, parentMatches) {\n  if (parentMatches === void 0) {\n    parentMatches = [];\n  }\n\n  if (matches == null) return null;\n  return matches.reduceRight((outlet, match, index) => {\n    return /*#__PURE__*/createElement(RouteContext.Provider, {\n      children: match.route.element !== undefined ? match.route.element : /*#__PURE__*/createElement(Outlet, null),\n      value: {\n        outlet,\n        matches: parentMatches.concat(matches.slice(0, index + 1))\n      }\n    });\n  }, null);\n}\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/docs/en/v6/api#matchpath\n */\n\n\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n\n  let [matcher, paramNames] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);\n  let match = pathname.match(matcher);\n  if (!match) return null;\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params = paramNames.reduce((memo, paramName, index) => {\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      let splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n\n    memo[paramName] = safelyDecodeURIComponent(captureGroups[index] || \"\", paramName);\n    return memo;\n  }, {});\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern\n  };\n}\n\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n\n  if (end === void 0) {\n    end = true;\n  }\n\n  process.env.NODE_ENV !== \"production\" ? warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\")) : void 0;\n  let paramNames = [];\n  let regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/:(\\w+)/g, (_, paramName) => {\n    paramNames.push(paramName);\n    return \"([^\\\\/]+)\";\n  });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else {\n    regexpSource += end ? \"\\\\/*$\" // When matching to the end, ignore trailing slashes\n    : // Otherwise, match a word boundary or a proceeding /. The word boundary restricts\n    // parent routes to matching only their own words and nothing more, e.g. parent\n    // route \"/home\" should not match \"/home2\".\n    \"(?:\\\\b|\\\\/|$)\";\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURIComponent(value, paramName) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    process.env.NODE_ENV !== \"production\" ? warning(false, \"The value for the URL param \\\"\" + paramName + \"\\\" will not be decoded because\" + (\" the string \\\"\" + value + \"\\\" is a malformed URL segment. This is probably\") + (\" due to a bad percent encoding (\" + error + \").\")) : void 0;\n    return value;\n  }\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/docs/en/v6/api#resolvepath\n */\n\n\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\"\n  } = typeof to === \"string\" ? parsePath(to) : to;\n  let pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\n\nfunction resolvePathname(relativePath, fromPathname) {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(segment => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction resolveTo(toArg, routePathnames, locationPathname) {\n  let to = typeof toArg === \"string\" ? parsePath(toArg) : toArg;\n  let toPathname = toArg === \"\" || to.pathname === \"\" ? \"/\" : to.pathname; // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n\n  let from;\n\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\"); // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    } // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from); // Ensure the pathname has a trailing slash if the original to value had one.\n\n  if (toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\") && !path.pathname.endsWith(\"/\")) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  let nextChar = pathname.charAt(basename.length);\n\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(basename.length) || \"/\";\n}\n\nconst joinPaths = paths => paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\nconst normalizePathname = pathname => pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\nconst normalizeSearch = search => !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n\nconst normalizeHash = hash => !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash; ///////////////////////////////////////////////////////////////////////////////\n\n\nexport { MemoryRouter, Navigate, Outlet, Route, Router, Routes, LocationContext as UNSAFE_LocationContext, NavigationContext as UNSAFE_NavigationContext, RouteContext as UNSAFE_RouteContext, createRoutesFromChildren, generatePath, matchPath, matchRoutes, renderMatches, resolvePath, useHref, useInRouterContext, useLocation, useMatch, useNavigate, useNavigationType, useOutlet, useOutletContext, useParams, useResolvedPath, useRoutes };","map":{"version":3,"mappings":"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","names":["invariant","cond","message","Error","warning","console","warn","e","alreadyWarned","warningOnce","key","process","NavigationContext","React","displayName","LocationContext","RouteContext","outlet","matches","MemoryRouter","basename","children","initialEntries","initialIndex","_ref","historyRef","current","createMemoryHistory","history","state","setState","action","location","listen","React.createElement","Router","navigationType","navigator","Navigate","to","replace","_ref2","useInRouterContext","static","navigate","useNavigate","Outlet","props","useOutlet","context","Route","_props","basenameProp","locationProp","NavigationType","Pop","staticProp","_ref3","normalizePathname","navigationContext","parsePath","pathname","search","hash","trailingPathname","stripBasename","Provider","value","Routes","_ref4","useRoutes","createRoutesFromChildren","useHref","useResolvedPath","joinedPathname","toPathname","getToPathname","endsWithSlash","endsWith","joinPaths","createHref","useLocation","useNavigationType","useMatch","pattern","matchPath","locationPathname","routePathnamesJson","JSON","stringify","map","match","pathnameBase","activeRef","options","go","path","resolveTo","parse","push","OutletContext","useOutletContext","useParams","routeMatch","length","params","routes","locationArg","parentMatches","parentParams","parentPathname","parentPathnameBase","parentRoute","route","parentPath","locationFromContext","parsedLocationArg","_parsedLocationArg$pa","startsWith","remainingPathname","slice","matchRoutes","element","undefined","_renderMatches","Object","assign","forEach","type","apply","name","caseSensitive","index","generatePath","_","branches","flattenRoutes","rankRouteBranches","i","matchRouteBranch","parentsMeta","meta","relativePath","childrenIndex","routesMeta","concat","score","computeScore","sort","a","b","compareIndexes","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","segments","split","initialScore","some","filter","reduce","segment","test","siblings","every","n","branch","matchedParams","matchedPathname","end","renderMatches","reduceRight","matcher","paramNames","compilePath","captureGroups","memo","paramName","splatValue","safelyDecodeURIComponent","regexpSource","RegExp","decodeURIComponent","error","resolvePath","fromPathname","resolvePathname","normalizeSearch","normalizeHash","relativeSegments","pop","join","toArg","routePathnames","from","routePathnameIndex","toSegments","shift","toLowerCase","nextChar","charAt","paths"],"sources":["/Users/juancarlossilva/Documents/apps/backend-test/packages/react-router/index.tsx"],"sourcesContent":["import * as React from \"react\";\nimport type {\n  History,\n  InitialEntry,\n  Location,\n  MemoryHistory,\n  Path,\n  To\n} from \"history\";\nimport {\n  Action as NavigationType,\n  createMemoryHistory,\n  parsePath\n} from \"history\";\n\nexport type { Location, Path, To, NavigationType };\n\nfunction invariant(cond: any, message: string): asserts cond {\n  if (!cond) throw new Error(message);\n}\n\nfunction warning(cond: any, message: string): void {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nconst alreadyWarned: Record<string, boolean> = {};\nfunction warningOnce(key: string, cond: boolean, message: string) {\n  if (!cond && !alreadyWarned[key]) {\n    alreadyWarned[key] = true;\n    warning(false, message);\n  }\n}\n\n///////////////////////////////////////////////////////////////////////////////\n// CONTEXT\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Navigator is a \"location changer\"; it's how you get to different locations.\n *\n * Every history instance conforms to the Navigator interface, but the\n * distinction is useful primarily when it comes to the low-level <Router> API\n * where both the location and a navigator must be provided separately in order\n * to avoid \"tearing\" that may occur in a suspense-enabled app if the action\n * and/or location were to be read directly from the history instance.\n */\nexport type Navigator = Pick<History, \"go\" | \"push\" | \"replace\" | \"createHref\">;\n\ninterface NavigationContextObject {\n  basename: string;\n  navigator: Navigator;\n  static: boolean;\n}\n\nconst NavigationContext = React.createContext<NavigationContextObject>(null!);\n\nif (__DEV__) {\n  NavigationContext.displayName = \"Navigation\";\n}\n\ninterface LocationContextObject {\n  location: Location;\n  navigationType: NavigationType;\n}\n\nconst LocationContext = React.createContext<LocationContextObject>(null!);\n\nif (__DEV__) {\n  LocationContext.displayName = \"Location\";\n}\n\ninterface RouteContextObject {\n  outlet: React.ReactElement | null;\n  matches: RouteMatch[];\n}\n\nconst RouteContext = React.createContext<RouteContextObject>({\n  outlet: null,\n  matches: []\n});\n\nif (__DEV__) {\n  RouteContext.displayName = \"Route\";\n}\n\n///////////////////////////////////////////////////////////////////////////////\n// COMPONENTS\n///////////////////////////////////////////////////////////////////////////////\n\nexport interface MemoryRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n}\n\n/**\n * A <Router> that stores all entries in memory.\n *\n * @see https://reactrouter.com/docs/en/v6/api#memoryrouter\n */\nexport function MemoryRouter({\n  basename,\n  children,\n  initialEntries,\n  initialIndex\n}: MemoryRouterProps): React.ReactElement {\n  let historyRef = React.useRef<MemoryHistory>();\n  if (historyRef.current == null) {\n    historyRef.current = createMemoryHistory({ initialEntries, initialIndex });\n  }\n\n  let history = historyRef.current;\n  let [state, setState] = React.useState({\n    action: history.action,\n    location: history.location\n  });\n\n  React.useLayoutEffect(() => history.listen(setState), [history]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n    />\n  );\n}\n\nexport interface NavigateProps {\n  to: To;\n  replace?: boolean;\n  state?: any;\n}\n\n/**\n * Changes the current location.\n *\n * Note: This API is mostly useful in React.Component subclasses that are not\n * able to use hooks. In functional components, we recommend you use the\n * `useNavigate` hook instead.\n *\n * @see https://reactrouter.com/docs/en/v6/api#navigate\n */\nexport function Navigate({ to, replace, state }: NavigateProps): null {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of\n    // the router loaded. We can help them understand how to avoid that.\n    `<Navigate> may be used only in the context of a <Router> component.`\n  );\n\n  warning(\n    !React.useContext(NavigationContext).static,\n    `<Navigate> must not be used on the initial render in a <StaticRouter>. ` +\n      `This is a no-op, but you should modify your code so the <Navigate> is ` +\n      `only ever rendered in response to some user interaction or state change.`\n  );\n\n  let navigate = useNavigate();\n  React.useEffect(() => {\n    navigate(to, { replace, state });\n  });\n\n  return null;\n}\n\nexport interface OutletProps {\n  context?: unknown;\n}\n\n/**\n * Renders the child route's element, if there is one.\n *\n * @see https://reactrouter.com/docs/en/v6/api#outlet\n */\nexport function Outlet(props: OutletProps): React.ReactElement | null {\n  return useOutlet(props.context);\n}\n\nexport interface RouteProps {\n  caseSensitive?: boolean;\n  children?: React.ReactNode;\n  element?: React.ReactNode | null;\n  index?: boolean;\n  path?: string;\n}\n\nexport interface PathRouteProps {\n  caseSensitive?: boolean;\n  children?: React.ReactNode;\n  element?: React.ReactNode | null;\n  index?: false;\n  path: string;\n}\n\nexport interface LayoutRouteProps {\n  children?: React.ReactNode;\n  element?: React.ReactNode | null;\n}\n\nexport interface IndexRouteProps {\n  element?: React.ReactNode | null;\n  index: true;\n}\n\n/**\n * Declares an element that should be rendered at a certain URL path.\n *\n * @see https://reactrouter.com/docs/en/v6/api#route\n */\nexport function Route(\n  _props: PathRouteProps | LayoutRouteProps | IndexRouteProps\n): React.ReactElement | null {\n  invariant(\n    false,\n    `A <Route> is only ever to be used as the child of <Routes> element, ` +\n      `never rendered directly. Please wrap your <Route> in a <Routes>.`\n  );\n}\n\nexport interface RouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  location: Partial<Location> | string;\n  navigationType?: NavigationType;\n  navigator: Navigator;\n  static?: boolean;\n}\n\n/**\n * Provides location context for the rest of the app.\n *\n * Note: You usually won't render a <Router> directly. Instead, you'll render a\n * router that is more specific to your environment such as a <BrowserRouter>\n * in web browsers or a <StaticRouter> for server rendering.\n *\n * @see https://reactrouter.com/docs/en/v6/api#router\n */\nexport function Router({\n  basename: basenameProp = \"/\",\n  children = null,\n  location: locationProp,\n  navigationType = NavigationType.Pop,\n  navigator,\n  static: staticProp = false\n}: RouterProps): React.ReactElement | null {\n  invariant(\n    !useInRouterContext(),\n    `You cannot render a <Router> inside another <Router>.` +\n      ` You should never have more than one in your app.`\n  );\n\n  let basename = normalizePathname(basenameProp);\n  let navigationContext = React.useMemo(\n    () => ({ basename, navigator, static: staticProp }),\n    [basename, navigator, staticProp]\n  );\n\n  if (typeof locationProp === \"string\") {\n    locationProp = parsePath(locationProp);\n  }\n\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\",\n    state = null,\n    key = \"default\"\n  } = locationProp;\n\n  let location = React.useMemo(() => {\n    let trailingPathname = stripBasename(pathname, basename);\n\n    if (trailingPathname == null) {\n      return null;\n    }\n\n    return {\n      pathname: trailingPathname,\n      search,\n      hash,\n      state,\n      key\n    };\n  }, [basename, pathname, search, hash, state, key]);\n\n  warning(\n    location != null,\n    `<Router basename=\"${basename}\"> is not able to match the URL ` +\n      `\"${pathname}${search}${hash}\" because it does not start with the ` +\n      `basename, so the <Router> won't render anything.`\n  );\n\n  if (location == null) {\n    return null;\n  }\n\n  return (\n    <NavigationContext.Provider value={navigationContext}>\n      <LocationContext.Provider\n        children={children}\n        value={{ location, navigationType }}\n      />\n    </NavigationContext.Provider>\n  );\n}\n\nexport interface RoutesProps {\n  children?: React.ReactNode;\n  location?: Partial<Location> | string;\n}\n\n/**\n * A container for a nested tree of <Route> elements that renders the branch\n * that best matches the current location.\n *\n * @see https://reactrouter.com/docs/en/v6/api#routes\n */\nexport function Routes({\n  children,\n  location\n}: RoutesProps): React.ReactElement | null {\n  return useRoutes(createRoutesFromChildren(children), location);\n}\n\n///////////////////////////////////////////////////////////////////////////////\n// HOOKS\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * Returns the full href for the given \"to\" value. This is useful for building\n * custom links that are also accessible and preserve right-click behavior.\n *\n * @see https://reactrouter.com/docs/en/v6/api#usehref\n */\nexport function useHref(to: To): string {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useHref() may be used only in the context of a <Router> component.`\n  );\n\n  let { basename, navigator } = React.useContext(NavigationContext);\n  let { hash, pathname, search } = useResolvedPath(to);\n\n  let joinedPathname = pathname;\n  if (basename !== \"/\") {\n    let toPathname = getToPathname(to);\n    let endsWithSlash = toPathname != null && toPathname.endsWith(\"/\");\n    joinedPathname =\n      pathname === \"/\"\n        ? basename + (endsWithSlash ? \"/\" : \"\")\n        : joinPaths([basename, pathname]);\n  }\n\n  return navigator.createHref({ pathname: joinedPathname, search, hash });\n}\n\n/**\n * Returns true if this component is a descendant of a <Router>.\n *\n * @see https://reactrouter.com/docs/en/v6/api#useinroutercontext\n */\nexport function useInRouterContext(): boolean {\n  return React.useContext(LocationContext) != null;\n}\n\n/**\n * Returns the current location object, which represents the current URL in web\n * browsers.\n *\n * Note: If you're using this it may mean you're doing some of your own\n * \"routing\" in your app, and we'd like to know what your use case is. We may\n * be able to provide something higher-level to better suit your needs.\n *\n * @see https://reactrouter.com/docs/en/v6/api#uselocation\n */\nexport function useLocation(): Location {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useLocation() may be used only in the context of a <Router> component.`\n  );\n\n  return React.useContext(LocationContext).location;\n}\n\ntype ParamParseFailed = { failed: true };\n\ntype ParamParseSegment<Segment extends string> =\n  // Check here if there exists a forward slash in the string.\n  Segment extends `${infer LeftSegment}/${infer RightSegment}`\n    ? // If there is a forward slash, then attempt to parse each side of the\n      // forward slash.\n      ParamParseSegment<LeftSegment> extends infer LeftResult\n      ? ParamParseSegment<RightSegment> extends infer RightResult\n        ? LeftResult extends string\n          ? // If the left side is successfully parsed as a param, then check if\n            // the right side can be successfully parsed as well. If both sides\n            // can be parsed, then the result is a union of the two sides\n            // (read: \"foo\" | \"bar\").\n            RightResult extends string\n            ? LeftResult | RightResult\n            : LeftResult\n          : // If the left side is not successfully parsed as a param, then check\n          // if only the right side can be successfully parse as a param. If it\n          // can, then the result is just right, else it's a failure.\n          RightResult extends string\n          ? RightResult\n          : ParamParseFailed\n        : ParamParseFailed\n      : // If the left side didn't parse into a param, then just check the right\n      // side.\n      ParamParseSegment<RightSegment> extends infer RightResult\n      ? RightResult extends string\n        ? RightResult\n        : ParamParseFailed\n      : ParamParseFailed\n    : // If there's no forward slash, then check if this segment starts with a\n    // colon. If it does, then this is a dynamic segment, so the result is\n    // just the remainder of the string. Otherwise, it's a failure.\n    Segment extends `:${infer Remaining}`\n    ? Remaining\n    : ParamParseFailed;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\ntype ParamParseKey<Segment extends string> =\n  ParamParseSegment<Segment> extends string\n    ? ParamParseSegment<Segment>\n    : string;\n\n/**\n * Returns the current navigation action which describes how the router came to\n * the current location, either by a pop, push, or replace on the history stack.\n *\n * @see https://reactrouter.com/docs/en/v6/api#usenavigationtype\n */\nexport function useNavigationType(): NavigationType {\n  return React.useContext(LocationContext).navigationType;\n}\n\n/**\n * Returns true if the URL for the given \"to\" value matches the current URL.\n * This is useful for components that need to know \"active\" state, e.g.\n * <NavLink>.\n *\n * @see https://reactrouter.com/docs/en/v6/api#usematch\n */\nexport function useMatch<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(pattern: PathPattern<Path> | Path): PathMatch<ParamKey> | null {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useMatch() may be used only in the context of a <Router> component.`\n  );\n\n  let { pathname } = useLocation();\n  return React.useMemo(\n    () => matchPath<ParamKey, Path>(pattern, pathname),\n    [pathname, pattern]\n  );\n}\n\n/**\n * The interface for the navigate() function returned from useNavigate().\n */\nexport interface NavigateFunction {\n  (to: To, options?: NavigateOptions): void;\n  (delta: number): void;\n}\n\nexport interface NavigateOptions {\n  replace?: boolean;\n  state?: any;\n}\n\n/**\n * Returns an imperative method for changing the location. Used by <Link>s, but\n * may also be used by other elements to change the location.\n *\n * @see https://reactrouter.com/docs/en/v6/api#usenavigate\n */\nexport function useNavigate(): NavigateFunction {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useNavigate() may be used only in the context of a <Router> component.`\n  );\n\n  let { basename, navigator } = React.useContext(NavigationContext);\n  let { matches } = React.useContext(RouteContext);\n  let { pathname: locationPathname } = useLocation();\n\n  let routePathnamesJson = JSON.stringify(\n    matches.map(match => match.pathnameBase)\n  );\n\n  let activeRef = React.useRef(false);\n  React.useEffect(() => {\n    activeRef.current = true;\n  });\n\n  let navigate: NavigateFunction = React.useCallback(\n    (to: To | number, options: NavigateOptions = {}) => {\n      warning(\n        activeRef.current,\n        `You should call navigate() in a React.useEffect(), not when ` +\n          `your component is first rendered.`\n      );\n\n      if (!activeRef.current) return;\n\n      if (typeof to === \"number\") {\n        navigator.go(to);\n        return;\n      }\n\n      let path = resolveTo(\n        to,\n        JSON.parse(routePathnamesJson),\n        locationPathname\n      );\n\n      if (basename !== \"/\") {\n        path.pathname = joinPaths([basename, path.pathname]);\n      }\n\n      (!!options.replace ? navigator.replace : navigator.push)(\n        path,\n        options.state\n      );\n    },\n    [basename, navigator, routePathnamesJson, locationPathname]\n  );\n\n  return navigate;\n}\n\nconst OutletContext = React.createContext<unknown>(null);\n\n/**\n * Returns the context (if provided) for the child route at this level of the route\n * hierarchy.\n * @see https://reactrouter.com/docs/en/v6/api#useoutletcontext\n */\nexport function useOutletContext<Context = unknown>(): Context {\n  return React.useContext(OutletContext) as Context;\n}\n\n/**\n * Returns the element for the child route at this level of the route\n * hierarchy. Used internally by <Outlet> to render child routes.\n *\n * @see https://reactrouter.com/docs/en/v6/api#useoutlet\n */\nexport function useOutlet(context?: unknown): React.ReactElement | null {\n  let outlet = React.useContext(RouteContext).outlet;\n  if (outlet) {\n    return (\n      <OutletContext.Provider value={context}>{outlet}</OutletContext.Provider>\n    );\n  }\n  return outlet;\n}\n\n/**\n * Returns an object of key/value pairs of the dynamic params from the current\n * URL that were matched by the route path.\n *\n * @see https://reactrouter.com/docs/en/v6/api#useparams\n */\nexport function useParams<\n  ParamsOrKey extends string | Record<string, string | undefined> = string\n>(): Readonly<\n  [ParamsOrKey] extends [string] ? Params<ParamsOrKey> : Partial<ParamsOrKey>\n> {\n  let { matches } = React.useContext(RouteContext);\n  let routeMatch = matches[matches.length - 1];\n  return routeMatch ? (routeMatch.params as any) : {};\n}\n\n/**\n * Resolves the pathname of the given `to` value against the current location.\n *\n * @see https://reactrouter.com/docs/en/v6/api#useresolvedpath\n */\nexport function useResolvedPath(to: To): Path {\n  let { matches } = React.useContext(RouteContext);\n  let { pathname: locationPathname } = useLocation();\n\n  let routePathnamesJson = JSON.stringify(\n    matches.map(match => match.pathnameBase)\n  );\n\n  return React.useMemo(\n    () => resolveTo(to, JSON.parse(routePathnamesJson), locationPathname),\n    [to, routePathnamesJson, locationPathname]\n  );\n}\n\n/**\n * Returns the element of the route that matched the current location, prepared\n * with the correct context to render the remainder of the route tree. Route\n * elements in the tree must render an <Outlet> to render their child route's\n * element.\n *\n * @see https://reactrouter.com/docs/en/v6/api#useroutes\n */\nexport function useRoutes(\n  routes: RouteObject[],\n  locationArg?: Partial<Location> | string\n): React.ReactElement | null {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useRoutes() may be used only in the context of a <Router> component.`\n  );\n\n  let { matches: parentMatches } = React.useContext(RouteContext);\n  let routeMatch = parentMatches[parentMatches.length - 1];\n  let parentParams = routeMatch ? routeMatch.params : {};\n  let parentPathname = routeMatch ? routeMatch.pathname : \"/\";\n  let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : \"/\";\n  let parentRoute = routeMatch && routeMatch.route;\n\n  if (__DEV__) {\n    // You won't get a warning about 2 different <Routes> under a <Route>\n    // without a trailing *, but this is a best-effort warning anyway since we\n    // cannot even give the warning unless they land at the parent route.\n    //\n    // Example:\n    //\n    // <Routes>\n    //   {/* This route path MUST end with /* because otherwise\n    //       it will never match /blog/post/123 */}\n    //   <Route path=\"blog\" element={<Blog />} />\n    //   <Route path=\"blog/feed\" element={<BlogFeed />} />\n    // </Routes>\n    //\n    // function Blog() {\n    //   return (\n    //     <Routes>\n    //       <Route path=\"post/:id\" element={<Post />} />\n    //     </Routes>\n    //   );\n    // }\n    let parentPath = (parentRoute && parentRoute.path) || \"\";\n    warningOnce(\n      parentPathname,\n      !parentRoute || parentPath.endsWith(\"*\"),\n      `You rendered descendant <Routes> (or called \\`useRoutes()\\`) at ` +\n        `\"${parentPathname}\" (under <Route path=\"${parentPath}\">) but the ` +\n        `parent route path has no trailing \"*\". This means if you navigate ` +\n        `deeper, the parent won't match anymore and therefore the child ` +\n        `routes will never render.\\n\\n` +\n        `Please change the parent <Route path=\"${parentPath}\"> to <Route ` +\n        `path=\"${parentPath === \"/\" ? \"*\" : `${parentPath}/*`}\">.`\n    );\n  }\n\n  let locationFromContext = useLocation();\n\n  let location;\n  if (locationArg) {\n    let parsedLocationArg =\n      typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n    invariant(\n      parentPathnameBase === \"/\" ||\n        parsedLocationArg.pathname?.startsWith(parentPathnameBase),\n      `When overriding the location using \\`<Routes location>\\` or \\`useRoutes(routes, location)\\`, ` +\n        `the location pathname must begin with the portion of the URL pathname that was ` +\n        `matched by all parent routes. The current pathname base is \"${parentPathnameBase}\" ` +\n        `but pathname \"${parsedLocationArg.pathname}\" was given in the \\`location\\` prop.`\n    );\n\n    location = parsedLocationArg;\n  } else {\n    location = locationFromContext;\n  }\n\n  let pathname = location.pathname || \"/\";\n  let remainingPathname =\n    parentPathnameBase === \"/\"\n      ? pathname\n      : pathname.slice(parentPathnameBase.length) || \"/\";\n  let matches = matchRoutes(routes, { pathname: remainingPathname });\n\n  if (__DEV__) {\n    warning(\n      parentRoute || matches != null,\n      `No routes matched location \"${location.pathname}${location.search}${location.hash}\" `\n    );\n\n    warning(\n      matches == null ||\n        matches[matches.length - 1].route.element !== undefined,\n      `Matched leaf route at location \"${location.pathname}${location.search}${location.hash}\" does not have an element. ` +\n        `This means it will render an <Outlet /> with a null value by default resulting in an \"empty\" page.`\n    );\n  }\n\n  return _renderMatches(\n    matches &&\n      matches.map(match =>\n        Object.assign({}, match, {\n          params: Object.assign({}, parentParams, match.params),\n          pathname: joinPaths([parentPathnameBase, match.pathname]),\n          pathnameBase:\n            match.pathnameBase === \"/\"\n              ? parentPathnameBase\n              : joinPaths([parentPathnameBase, match.pathnameBase])\n        })\n      ),\n    parentMatches\n  );\n}\n\n///////////////////////////////////////////////////////////////////////////////\n// UTILS\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * Creates a route config from a React \"children\" object, which is usually\n * either a `<Route>` element or an array of them. Used internally by\n * `<Routes>` to create a route config from its children.\n *\n * @see https://reactrouter.com/docs/en/v6/api#createroutesfromchildren\n */\nexport function createRoutesFromChildren(\n  children: React.ReactNode\n): RouteObject[] {\n  let routes: RouteObject[] = [];\n\n  React.Children.forEach(children, element => {\n    if (!React.isValidElement(element)) {\n      // Ignore non-elements. This allows people to more easily inline\n      // conditionals in their route config.\n      return;\n    }\n\n    if (element.type === React.Fragment) {\n      // Transparently support React.Fragment and its children.\n      routes.push.apply(\n        routes,\n        createRoutesFromChildren(element.props.children)\n      );\n      return;\n    }\n\n    invariant(\n      element.type === Route,\n      `[${\n        typeof element.type === \"string\" ? element.type : element.type.name\n      }] is not a <Route> component. All component children of <Routes> must be a <Route> or <React.Fragment>`\n    );\n\n    let route: RouteObject = {\n      caseSensitive: element.props.caseSensitive,\n      element: element.props.element,\n      index: element.props.index,\n      path: element.props.path\n    };\n\n    if (element.props.children) {\n      route.children = createRoutesFromChildren(element.props.children);\n    }\n\n    routes.push(route);\n  });\n\n  return routes;\n}\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport interface RouteObject {\n  caseSensitive?: boolean;\n  children?: RouteObject[];\n  element?: React.ReactNode;\n  index?: boolean;\n  path?: string;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/docs/en/v6/api#generatepath\n */\nexport function generatePath(path: string, params: Params = {}): string {\n  return path\n    .replace(/:(\\w+)/g, (_, key) => {\n      invariant(params[key] != null, `Missing \":${key}\" param`);\n      return params[key]!;\n    })\n    .replace(/\\/*\\*$/, _ =>\n      params[\"*\"] == null ? \"\" : params[\"*\"].replace(/^\\/*/, \"/\")\n    );\n}\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface RouteMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObject;\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/docs/en/v6/api#matchroutes\n */\nexport function matchRoutes(\n  routes: RouteObject[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): RouteMatch[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch(branches[i], pathname);\n  }\n\n  return matches;\n}\n\ninterface RouteMeta {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObject;\n}\n\ninterface RouteBranch {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta[];\n}\n\nfunction flattenRoutes(\n  routes: RouteObject[],\n  branches: RouteBranch[] = [],\n  parentsMeta: RouteMeta[] = [],\n  parentPath = \"\"\n): RouteBranch[] {\n  routes.forEach((route, index) => {\n    let meta: RouteMeta = {\n      relativePath: route.path || \"\",\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({ path, score: computeScore(path, route.index), routesMeta });\n  });\n\n  return branches;\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map(meta => meta.childrenIndex),\n          b.routesMeta.map(meta => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter(s => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<ParamKey extends string = string>(\n  branch: RouteBranch,\n  pathname: string\n): RouteMatch<ParamKey>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: RouteMatch[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    if (!match) return null;\n\n    Object.assign(matchedParams, match.params);\n\n    let route = meta.route;\n\n    matches.push({\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: joinPaths([matchedPathname, match.pathnameBase]),\n      route\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Renders the result of `matchRoutes()` into a React element.\n */\nexport function renderMatches(\n  matches: RouteMatch[] | null\n): React.ReactElement | null {\n  return _renderMatches(matches);\n}\n\nfunction _renderMatches(\n  matches: RouteMatch[] | null,\n  parentMatches: RouteMatch[] = []\n): React.ReactElement | null {\n  if (matches == null) return null;\n\n  return matches.reduceRight((outlet, match, index) => {\n    return (\n      <RouteContext.Provider\n        children={\n          match.route.element !== undefined ? match.route.element : <Outlet />\n        }\n        value={{\n          outlet,\n          matches: parentMatches.concat(matches.slice(0, index + 1))\n        }}\n      />\n    );\n  }, null as React.ReactElement | null);\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/docs/en/v6/api#matchpath\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, paramNames] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = paramNames.reduce<Mutable<Params>>(\n    (memo, paramName, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      memo[paramName] = safelyDecodeURIComponent(\n        captureGroups[index] || \"\",\n        paramName\n      );\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern\n  };\n}\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, string[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let paramNames: string[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(/:(\\w+)/g, (_: string, paramName: string) => {\n        paramNames.push(paramName);\n        return \"([^\\\\/]+)\";\n      });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else {\n    regexpSource += end\n      ? \"\\\\/*$\" // When matching to the end, ignore trailing slashes\n      : // Otherwise, match a word boundary or a proceeding /. The word boundary restricts\n        // parent routes to matching only their own words and nothing more, e.g. parent\n        // route \"/home\" should not match \"/home2\".\n        \"(?:\\\\b|\\\\/|$)\";\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURIComponent(value: string, paramName: string) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(\n      false,\n      `The value for the URL param \"${paramName}\" will not be decoded because` +\n        ` the string \"${value}\" is a malformed URL segment. This is probably` +\n        ` due to a bad percent encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/docs/en/v6/api#resolvepath\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\"\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach(segment => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string\n): Path {\n  let to = typeof toArg === \"string\" ? parsePath(toArg) : toArg;\n  let toPathname = toArg === \"\" || to.pathname === \"\" ? \"/\" : to.pathname;\n\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  let from: string;\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original to value had one.\n  if (\n    toPathname &&\n    toPathname !== \"/\" &&\n    toPathname.endsWith(\"/\") &&\n    !path.pathname.endsWith(\"/\")\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\nfunction getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\nfunction stripBasename(pathname: string, basename: string): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  let nextChar = pathname.charAt(basename.length);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(basename.length) || \"/\";\n}\n\nconst joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\nconst normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\nconst normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\nconst normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\n///////////////////////////////////////////////////////////////////////////////\n// DANGER! PLEASE READ ME!\n// We provide these exports as an escape hatch in the event that you need any\n// routing data that we don't provide an explicit API for. With that said, we\n// want to cover your use case if we can, so if you feel the need to use these\n// we want to hear from you. Let us know what you're building and we'll do our\n// best to make sure we can support you!\n//\n// We consider these exports an implementation detail and do not guarantee\n// against any breaking changes, regardless of the semver release. Use with\n// extreme caution and only if you understand the consequences. Godspeed.\n///////////////////////////////////////////////////////////////////////////////\n\n/** @internal */\nexport {\n  NavigationContext as UNSAFE_NavigationContext,\n  LocationContext as UNSAFE_LocationContext,\n  RouteContext as UNSAFE_RouteContext\n};\n"]},"metadata":{},"sourceType":"module"}