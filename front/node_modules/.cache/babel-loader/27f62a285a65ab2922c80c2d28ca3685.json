{"ast":null,"code":"import * as React from 'react';\nimport { useControlled } from '@mui/material/utils';\nimport { arrayIncludes } from '../utils';\nexport function useViews(_ref) {\n  let {\n    onChange,\n    onViewChange,\n    openTo,\n    view,\n    views\n  } = _ref;\n\n  var _views, _views2;\n\n  const [openView, setOpenView] = useControlled({\n    name: 'Picker',\n    state: 'view',\n    controlled: view,\n    default: openTo && arrayIncludes(views, openTo) ? openTo : views[0]\n  });\n  const previousView = (_views = views[views.indexOf(openView) - 1]) != null ? _views : null;\n  const nextView = (_views2 = views[views.indexOf(openView) + 1]) != null ? _views2 : null;\n  const changeView = React.useCallback(newView => {\n    setOpenView(newView);\n\n    if (onViewChange) {\n      onViewChange(newView);\n    }\n  }, [setOpenView, onViewChange]);\n  const openNext = React.useCallback(() => {\n    if (nextView) {\n      changeView(nextView);\n    }\n  }, [nextView, changeView]);\n  const handleChangeAndOpenNext = React.useCallback((date, currentViewSelectionState) => {\n    const isSelectionFinishedOnCurrentView = currentViewSelectionState === 'finish';\n    const globalSelectionState = isSelectionFinishedOnCurrentView && Boolean(nextView) ? 'partial' : currentViewSelectionState;\n    onChange(date, globalSelectionState);\n\n    if (isSelectionFinishedOnCurrentView) {\n      openNext();\n    }\n  }, [nextView, onChange, openNext]);\n  return {\n    handleChangeAndOpenNext,\n    nextView,\n    previousView,\n    openNext,\n    openView,\n    setOpenView: changeView\n  };\n}","map":{"version":3,"sources":["/Users/juancarlossilva/Documents/apps/backend-test/front/node_modules/@mui/lab/internal/pickers/hooks/useViews.js"],"names":["React","useControlled","arrayIncludes","useViews","onChange","onViewChange","openTo","view","views","_views","_views2","openView","setOpenView","name","state","controlled","default","previousView","indexOf","nextView","changeView","useCallback","newView","openNext","handleChangeAndOpenNext","date","currentViewSelectionState","isSelectionFinishedOnCurrentView","globalSelectionState","Boolean"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,aAAT,QAA8B,qBAA9B;AACA,SAASC,aAAT,QAA8B,UAA9B;AACA,OAAO,SAASC,QAAT,OAMJ;AAAA,MANsB;AACvBC,IAAAA,QADuB;AAEvBC,IAAAA,YAFuB;AAGvBC,IAAAA,MAHuB;AAIvBC,IAAAA,IAJuB;AAKvBC,IAAAA;AALuB,GAMtB;;AACD,MAAIC,MAAJ,EAAYC,OAAZ;;AAEA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BX,aAAa,CAAC;AAC5CY,IAAAA,IAAI,EAAE,QADsC;AAE5CC,IAAAA,KAAK,EAAE,MAFqC;AAG5CC,IAAAA,UAAU,EAAER,IAHgC;AAI5CS,IAAAA,OAAO,EAAEV,MAAM,IAAIJ,aAAa,CAACM,KAAD,EAAQF,MAAR,CAAvB,GAAyCA,MAAzC,GAAkDE,KAAK,CAAC,CAAD;AAJpB,GAAD,CAA7C;AAMA,QAAMS,YAAY,GAAG,CAACR,MAAM,GAAGD,KAAK,CAACA,KAAK,CAACU,OAAN,CAAcP,QAAd,IAA0B,CAA3B,CAAf,KAAiD,IAAjD,GAAwDF,MAAxD,GAAiE,IAAtF;AACA,QAAMU,QAAQ,GAAG,CAACT,OAAO,GAAGF,KAAK,CAACA,KAAK,CAACU,OAAN,CAAcP,QAAd,IAA0B,CAA3B,CAAhB,KAAkD,IAAlD,GAAyDD,OAAzD,GAAmE,IAApF;AACA,QAAMU,UAAU,GAAGpB,KAAK,CAACqB,WAAN,CAAkBC,OAAO,IAAI;AAC9CV,IAAAA,WAAW,CAACU,OAAD,CAAX;;AAEA,QAAIjB,YAAJ,EAAkB;AAChBA,MAAAA,YAAY,CAACiB,OAAD,CAAZ;AACD;AACF,GANkB,EAMhB,CAACV,WAAD,EAAcP,YAAd,CANgB,CAAnB;AAOA,QAAMkB,QAAQ,GAAGvB,KAAK,CAACqB,WAAN,CAAkB,MAAM;AACvC,QAAIF,QAAJ,EAAc;AACZC,MAAAA,UAAU,CAACD,QAAD,CAAV;AACD;AACF,GAJgB,EAId,CAACA,QAAD,EAAWC,UAAX,CAJc,CAAjB;AAKA,QAAMI,uBAAuB,GAAGxB,KAAK,CAACqB,WAAN,CAAkB,CAACI,IAAD,EAAOC,yBAAP,KAAqC;AACrF,UAAMC,gCAAgC,GAAGD,yBAAyB,KAAK,QAAvE;AACA,UAAME,oBAAoB,GAAGD,gCAAgC,IAAIE,OAAO,CAACV,QAAD,CAA3C,GAAwD,SAAxD,GAAoEO,yBAAjG;AACAtB,IAAAA,QAAQ,CAACqB,IAAD,EAAOG,oBAAP,CAAR;;AAEA,QAAID,gCAAJ,EAAsC;AACpCJ,MAAAA,QAAQ;AACT;AACF,GAR+B,EAQ7B,CAACJ,QAAD,EAAWf,QAAX,EAAqBmB,QAArB,CAR6B,CAAhC;AASA,SAAO;AACLC,IAAAA,uBADK;AAELL,IAAAA,QAFK;AAGLF,IAAAA,YAHK;AAILM,IAAAA,QAJK;AAKLZ,IAAAA,QALK;AAMLC,IAAAA,WAAW,EAAEQ;AANR,GAAP;AAQD","sourcesContent":["import * as React from 'react';\nimport { useControlled } from '@mui/material/utils';\nimport { arrayIncludes } from '../utils';\nexport function useViews({\n  onChange,\n  onViewChange,\n  openTo,\n  view,\n  views\n}) {\n  var _views, _views2;\n\n  const [openView, setOpenView] = useControlled({\n    name: 'Picker',\n    state: 'view',\n    controlled: view,\n    default: openTo && arrayIncludes(views, openTo) ? openTo : views[0]\n  });\n  const previousView = (_views = views[views.indexOf(openView) - 1]) != null ? _views : null;\n  const nextView = (_views2 = views[views.indexOf(openView) + 1]) != null ? _views2 : null;\n  const changeView = React.useCallback(newView => {\n    setOpenView(newView);\n\n    if (onViewChange) {\n      onViewChange(newView);\n    }\n  }, [setOpenView, onViewChange]);\n  const openNext = React.useCallback(() => {\n    if (nextView) {\n      changeView(nextView);\n    }\n  }, [nextView, changeView]);\n  const handleChangeAndOpenNext = React.useCallback((date, currentViewSelectionState) => {\n    const isSelectionFinishedOnCurrentView = currentViewSelectionState === 'finish';\n    const globalSelectionState = isSelectionFinishedOnCurrentView && Boolean(nextView) ? 'partial' : currentViewSelectionState;\n    onChange(date, globalSelectionState);\n\n    if (isSelectionFinishedOnCurrentView) {\n      openNext();\n    }\n  }, [nextView, onChange, openNext]);\n  return {\n    handleChangeAndOpenNext,\n    nextView,\n    previousView,\n    openNext,\n    openView,\n    setOpenView: changeView\n  };\n}"]},"metadata":{},"sourceType":"module"}