{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useRifm } from 'rifm';\nimport { useUtils } from './useUtils';\nimport { createDelegatedEventHandler } from '../utils';\nimport { maskedDateFormatter, getDisplayDate, checkMaskIsValidForCurrentFormat } from '../text-field-helper';\nexport function useMaskedInput(_ref) {\n  let {\n    acceptRegex = /[\\d]/gi,\n    disabled,\n    disableMaskedInput,\n    ignoreInvalidInputs,\n    inputFormat,\n    inputProps,\n    label,\n    mask,\n    onChange,\n    rawValue,\n    readOnly,\n    rifmFormatter,\n    TextFieldProps,\n    validationError\n  } = _ref;\n  const utils = useUtils();\n  const [isFocused, setIsFocused] = React.useState(false);\n  const formatHelperText = utils.getFormatHelperText(inputFormat);\n  const shouldUseMaskedInput = React.useMemo(() => {\n    // formatting of dates is a quite slow thing, so do not make useless .format calls\n    if (!mask || disableMaskedInput) {\n      return false;\n    }\n\n    return checkMaskIsValidForCurrentFormat(mask, inputFormat, acceptRegex, utils);\n  }, [acceptRegex, disableMaskedInput, inputFormat, mask, utils]);\n  const formatter = React.useMemo(() => shouldUseMaskedInput && mask ? maskedDateFormatter(mask, acceptRegex) : st => st, [acceptRegex, mask, shouldUseMaskedInput]); // TODO: Implement with controlled vs unctrolled `rawValue`\n\n  const currentInputValue = getDisplayDate(utils, rawValue, inputFormat);\n  const [innerInputValue, setInnerInputValue] = React.useState(currentInputValue);\n  const previousInputValueRef = React.useRef(currentInputValue);\n  React.useEffect(() => {\n    previousInputValueRef.current = currentInputValue;\n  }, [currentInputValue]);\n  const notTyping = !isFocused;\n  const valueChanged = previousInputValueRef.current !== currentInputValue; // Update the input value only if the value changed outside of typing\n\n  if (notTyping && valueChanged && (rawValue === null || utils.isValid(rawValue))) {\n    if (currentInputValue !== innerInputValue) {\n      setInnerInputValue(currentInputValue);\n    }\n  }\n\n  const handleChange = text => {\n    const finalString = text === '' || text === mask ? '' : text;\n    setInnerInputValue(finalString);\n    const date = finalString === null ? null : utils.parse(finalString, inputFormat);\n\n    if (ignoreInvalidInputs && !utils.isValid(date)) {\n      return;\n    }\n\n    onChange(date, finalString || undefined);\n  };\n\n  const rifmProps = useRifm({\n    value: innerInputValue,\n    onChange: handleChange,\n    format: rifmFormatter || formatter\n  });\n  const inputStateArgs = shouldUseMaskedInput ? rifmProps : {\n    value: innerInputValue,\n    onChange: event => {\n      handleChange(event.currentTarget.value);\n    }\n  };\n  return _extends({\n    label,\n    disabled,\n    error: validationError,\n    inputProps: _extends({}, inputStateArgs, {\n      disabled,\n      placeholder: formatHelperText,\n      readOnly,\n      type: shouldUseMaskedInput ? 'tel' : 'text'\n    }, inputProps, {\n      onFocus: createDelegatedEventHandler(() => {\n        setIsFocused(true);\n      }, inputProps == null ? void 0 : inputProps.onFocus),\n      onBlur: createDelegatedEventHandler(() => {\n        setIsFocused(false);\n      }, inputProps == null ? void 0 : inputProps.onBlur)\n    })\n  }, TextFieldProps);\n}\nexport default useMaskedInput;","map":{"version":3,"sources":["/Users/juancarlossilva/Documents/apps/backend-test/front/node_modules/@mui/lab/internal/pickers/hooks/useMaskedInput.js"],"names":["_extends","React","useRifm","useUtils","createDelegatedEventHandler","maskedDateFormatter","getDisplayDate","checkMaskIsValidForCurrentFormat","useMaskedInput","acceptRegex","disabled","disableMaskedInput","ignoreInvalidInputs","inputFormat","inputProps","label","mask","onChange","rawValue","readOnly","rifmFormatter","TextFieldProps","validationError","utils","isFocused","setIsFocused","useState","formatHelperText","getFormatHelperText","shouldUseMaskedInput","useMemo","formatter","st","currentInputValue","innerInputValue","setInnerInputValue","previousInputValueRef","useRef","useEffect","current","notTyping","valueChanged","isValid","handleChange","text","finalString","date","parse","undefined","rifmProps","value","format","inputStateArgs","event","currentTarget","error","placeholder","type","onFocus","onBlur"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useRifm } from 'rifm';\nimport { useUtils } from './useUtils';\nimport { createDelegatedEventHandler } from '../utils';\nimport { maskedDateFormatter, getDisplayDate, checkMaskIsValidForCurrentFormat } from '../text-field-helper';\nexport function useMaskedInput({\n  acceptRegex = /[\\d]/gi,\n  disabled,\n  disableMaskedInput,\n  ignoreInvalidInputs,\n  inputFormat,\n  inputProps,\n  label,\n  mask,\n  onChange,\n  rawValue,\n  readOnly,\n  rifmFormatter,\n  TextFieldProps,\n  validationError\n}) {\n  const utils = useUtils();\n  const [isFocused, setIsFocused] = React.useState(false);\n  const formatHelperText = utils.getFormatHelperText(inputFormat);\n  const shouldUseMaskedInput = React.useMemo(() => {\n    // formatting of dates is a quite slow thing, so do not make useless .format calls\n    if (!mask || disableMaskedInput) {\n      return false;\n    }\n\n    return checkMaskIsValidForCurrentFormat(mask, inputFormat, acceptRegex, utils);\n  }, [acceptRegex, disableMaskedInput, inputFormat, mask, utils]);\n  const formatter = React.useMemo(() => shouldUseMaskedInput && mask ? maskedDateFormatter(mask, acceptRegex) : st => st, [acceptRegex, mask, shouldUseMaskedInput]); // TODO: Implement with controlled vs unctrolled `rawValue`\n\n  const currentInputValue = getDisplayDate(utils, rawValue, inputFormat);\n  const [innerInputValue, setInnerInputValue] = React.useState(currentInputValue);\n  const previousInputValueRef = React.useRef(currentInputValue);\n  React.useEffect(() => {\n    previousInputValueRef.current = currentInputValue;\n  }, [currentInputValue]);\n  const notTyping = !isFocused;\n  const valueChanged = previousInputValueRef.current !== currentInputValue; // Update the input value only if the value changed outside of typing\n\n  if (notTyping && valueChanged && (rawValue === null || utils.isValid(rawValue))) {\n    if (currentInputValue !== innerInputValue) {\n      setInnerInputValue(currentInputValue);\n    }\n  }\n\n  const handleChange = text => {\n    const finalString = text === '' || text === mask ? '' : text;\n    setInnerInputValue(finalString);\n    const date = finalString === null ? null : utils.parse(finalString, inputFormat);\n\n    if (ignoreInvalidInputs && !utils.isValid(date)) {\n      return;\n    }\n\n    onChange(date, finalString || undefined);\n  };\n\n  const rifmProps = useRifm({\n    value: innerInputValue,\n    onChange: handleChange,\n    format: rifmFormatter || formatter\n  });\n  const inputStateArgs = shouldUseMaskedInput ? rifmProps : {\n    value: innerInputValue,\n    onChange: event => {\n      handleChange(event.currentTarget.value);\n    }\n  };\n  return _extends({\n    label,\n    disabled,\n    error: validationError,\n    inputProps: _extends({}, inputStateArgs, {\n      disabled,\n      placeholder: formatHelperText,\n      readOnly,\n      type: shouldUseMaskedInput ? 'tel' : 'text'\n    }, inputProps, {\n      onFocus: createDelegatedEventHandler(() => {\n        setIsFocused(true);\n      }, inputProps == null ? void 0 : inputProps.onFocus),\n      onBlur: createDelegatedEventHandler(() => {\n        setIsFocused(false);\n      }, inputProps == null ? void 0 : inputProps.onBlur)\n    })\n  }, TextFieldProps);\n}\nexport default useMaskedInput;"]},"metadata":{},"sourceType":"module"}