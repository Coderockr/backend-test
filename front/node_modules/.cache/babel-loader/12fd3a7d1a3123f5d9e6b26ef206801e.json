{"ast":null,"code":"import * as React from 'react';\nimport TreeViewContext from '../TreeView/TreeViewContext';\nexport default function useTreeItem(nodeId) {\n  const {\n    focus,\n    isExpanded,\n    isExpandable,\n    isFocused,\n    isDisabled,\n    isSelected,\n    multiSelect,\n    selectNode,\n    selectRange,\n    toggleExpansion\n  } = React.useContext(TreeViewContext);\n  const expandable = isExpandable ? isExpandable(nodeId) : false;\n  const expanded = isExpanded ? isExpanded(nodeId) : false;\n  const focused = isFocused ? isFocused(nodeId) : false;\n  const disabled = isDisabled ? isDisabled(nodeId) : false;\n  const selected = isSelected ? isSelected(nodeId) : false;\n\n  const handleExpansion = event => {\n    if (!disabled) {\n      if (!focused) {\n        focus(event, nodeId);\n      }\n\n      const multiple = multiSelect && (event.shiftKey || event.ctrlKey || event.metaKey); // If already expanded and trying to toggle selection don't close\n\n      if (expandable && !(multiple && isExpanded(nodeId))) {\n        toggleExpansion(event, nodeId);\n      }\n    }\n  };\n\n  const handleSelection = event => {\n    if (!disabled) {\n      if (!focused) {\n        focus(event, nodeId);\n      }\n\n      const multiple = multiSelect && (event.shiftKey || event.ctrlKey || event.metaKey);\n\n      if (multiple) {\n        if (event.shiftKey) {\n          selectRange(event, {\n            end: nodeId\n          });\n        } else {\n          selectNode(event, nodeId, true);\n        }\n      } else {\n        selectNode(event, nodeId);\n      }\n    }\n  };\n\n  const preventSelection = event => {\n    if (event.shiftKey || event.ctrlKey || event.metaKey || disabled) {\n      // Prevent text selection\n      event.preventDefault();\n    }\n  };\n\n  return {\n    disabled,\n    expanded,\n    selected,\n    focused,\n    handleExpansion,\n    handleSelection,\n    preventSelection\n  };\n}","map":{"version":3,"sources":["/Users/juancarlossilva/Documents/apps/backend-test/front/node_modules/@mui/lab/TreeItem/useTreeItem.js"],"names":["React","TreeViewContext","useTreeItem","nodeId","focus","isExpanded","isExpandable","isFocused","isDisabled","isSelected","multiSelect","selectNode","selectRange","toggleExpansion","useContext","expandable","expanded","focused","disabled","selected","handleExpansion","event","multiple","shiftKey","ctrlKey","metaKey","handleSelection","end","preventSelection","preventDefault"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,eAAP,MAA4B,6BAA5B;AACA,eAAe,SAASC,WAAT,CAAqBC,MAArB,EAA6B;AAC1C,QAAM;AACJC,IAAAA,KADI;AAEJC,IAAAA,UAFI;AAGJC,IAAAA,YAHI;AAIJC,IAAAA,SAJI;AAKJC,IAAAA,UALI;AAMJC,IAAAA,UANI;AAOJC,IAAAA,WAPI;AAQJC,IAAAA,UARI;AASJC,IAAAA,WATI;AAUJC,IAAAA;AAVI,MAWFb,KAAK,CAACc,UAAN,CAAiBb,eAAjB,CAXJ;AAYA,QAAMc,UAAU,GAAGT,YAAY,GAAGA,YAAY,CAACH,MAAD,CAAf,GAA0B,KAAzD;AACA,QAAMa,QAAQ,GAAGX,UAAU,GAAGA,UAAU,CAACF,MAAD,CAAb,GAAwB,KAAnD;AACA,QAAMc,OAAO,GAAGV,SAAS,GAAGA,SAAS,CAACJ,MAAD,CAAZ,GAAuB,KAAhD;AACA,QAAMe,QAAQ,GAAGV,UAAU,GAAGA,UAAU,CAACL,MAAD,CAAb,GAAwB,KAAnD;AACA,QAAMgB,QAAQ,GAAGV,UAAU,GAAGA,UAAU,CAACN,MAAD,CAAb,GAAwB,KAAnD;;AAEA,QAAMiB,eAAe,GAAGC,KAAK,IAAI;AAC/B,QAAI,CAACH,QAAL,EAAe;AACb,UAAI,CAACD,OAAL,EAAc;AACZb,QAAAA,KAAK,CAACiB,KAAD,EAAQlB,MAAR,CAAL;AACD;;AAED,YAAMmB,QAAQ,GAAGZ,WAAW,KAAKW,KAAK,CAACE,QAAN,IAAkBF,KAAK,CAACG,OAAxB,IAAmCH,KAAK,CAACI,OAA9C,CAA5B,CALa,CAKuE;;AAEpF,UAAIV,UAAU,IAAI,EAAEO,QAAQ,IAAIjB,UAAU,CAACF,MAAD,CAAxB,CAAlB,EAAqD;AACnDU,QAAAA,eAAe,CAACQ,KAAD,EAAQlB,MAAR,CAAf;AACD;AACF;AACF,GAZD;;AAcA,QAAMuB,eAAe,GAAGL,KAAK,IAAI;AAC/B,QAAI,CAACH,QAAL,EAAe;AACb,UAAI,CAACD,OAAL,EAAc;AACZb,QAAAA,KAAK,CAACiB,KAAD,EAAQlB,MAAR,CAAL;AACD;;AAED,YAAMmB,QAAQ,GAAGZ,WAAW,KAAKW,KAAK,CAACE,QAAN,IAAkBF,KAAK,CAACG,OAAxB,IAAmCH,KAAK,CAACI,OAA9C,CAA5B;;AAEA,UAAIH,QAAJ,EAAc;AACZ,YAAID,KAAK,CAACE,QAAV,EAAoB;AAClBX,UAAAA,WAAW,CAACS,KAAD,EAAQ;AACjBM,YAAAA,GAAG,EAAExB;AADY,WAAR,CAAX;AAGD,SAJD,MAIO;AACLQ,UAAAA,UAAU,CAACU,KAAD,EAAQlB,MAAR,EAAgB,IAAhB,CAAV;AACD;AACF,OARD,MAQO;AACLQ,QAAAA,UAAU,CAACU,KAAD,EAAQlB,MAAR,CAAV;AACD;AACF;AACF,GApBD;;AAsBA,QAAMyB,gBAAgB,GAAGP,KAAK,IAAI;AAChC,QAAIA,KAAK,CAACE,QAAN,IAAkBF,KAAK,CAACG,OAAxB,IAAmCH,KAAK,CAACI,OAAzC,IAAoDP,QAAxD,EAAkE;AAChE;AACAG,MAAAA,KAAK,CAACQ,cAAN;AACD;AACF,GALD;;AAOA,SAAO;AACLX,IAAAA,QADK;AAELF,IAAAA,QAFK;AAGLG,IAAAA,QAHK;AAILF,IAAAA,OAJK;AAKLG,IAAAA,eALK;AAMLM,IAAAA,eANK;AAOLE,IAAAA;AAPK,GAAP;AASD","sourcesContent":["import * as React from 'react';\nimport TreeViewContext from '../TreeView/TreeViewContext';\nexport default function useTreeItem(nodeId) {\n  const {\n    focus,\n    isExpanded,\n    isExpandable,\n    isFocused,\n    isDisabled,\n    isSelected,\n    multiSelect,\n    selectNode,\n    selectRange,\n    toggleExpansion\n  } = React.useContext(TreeViewContext);\n  const expandable = isExpandable ? isExpandable(nodeId) : false;\n  const expanded = isExpanded ? isExpanded(nodeId) : false;\n  const focused = isFocused ? isFocused(nodeId) : false;\n  const disabled = isDisabled ? isDisabled(nodeId) : false;\n  const selected = isSelected ? isSelected(nodeId) : false;\n\n  const handleExpansion = event => {\n    if (!disabled) {\n      if (!focused) {\n        focus(event, nodeId);\n      }\n\n      const multiple = multiSelect && (event.shiftKey || event.ctrlKey || event.metaKey); // If already expanded and trying to toggle selection don't close\n\n      if (expandable && !(multiple && isExpanded(nodeId))) {\n        toggleExpansion(event, nodeId);\n      }\n    }\n  };\n\n  const handleSelection = event => {\n    if (!disabled) {\n      if (!focused) {\n        focus(event, nodeId);\n      }\n\n      const multiple = multiSelect && (event.shiftKey || event.ctrlKey || event.metaKey);\n\n      if (multiple) {\n        if (event.shiftKey) {\n          selectRange(event, {\n            end: nodeId\n          });\n        } else {\n          selectNode(event, nodeId, true);\n        }\n      } else {\n        selectNode(event, nodeId);\n      }\n    }\n  };\n\n  const preventSelection = event => {\n    if (event.shiftKey || event.ctrlKey || event.metaKey || disabled) {\n      // Prevent text selection\n      event.preventDefault();\n    }\n  };\n\n  return {\n    disabled,\n    expanded,\n    selected,\n    focused,\n    handleExpansion,\n    handleSelection,\n    preventSelection\n  };\n}"]},"metadata":{},"sourceType":"module"}